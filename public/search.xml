<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云服务器搭建个人网站</title>
      <link href="/2024/04/01/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2024/04/01/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><blockquote><p>本文参考自12.29日尚硅谷雷神的 <a href="https://gitee.com/leifengyang/java-design-pattern">巧妙使用设计模式重构项目</a></p></blockquote><h2 id="一、设计模式总览"><a href="#一、设计模式总览" class="headerlink" title="一、设计模式总览"></a>一、设计模式总览</h2><ul><li>总体分类</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9e402b0c6ec2bc81a317c6b8774d2c7f.png" alt="image-20230113210444492"></p><ul><li>不同时期选择不同的设计模式~</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/5ed1ffc8fb36192278f04e22eb606402.png" alt="image-20230114113220058"></p><ul><li>设计模式本质上玩的就是：<code>封装</code>，<code>继承</code>，<code>多态</code></li><li>设计模式遵循的六大原则</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/df85588b81d2d6631d201855a66ea948.png" alt="image-20230114113416409"></p><h2 id="二、模板方法模式案例"><a href="#二、模板方法模式案例" class="headerlink" title="二、模板方法模式案例"></a>二、模板方法模式案例</h2><p><strong>描述：</strong>父类（接口、抽象类）提供了一种<code>定义算法的骨架</code>，&#x3D;&#x3D;允许子类为一个或多个步骤提供实现&#x3D;&#x3D;，在不改变算法结构的情况下，重新定义算法的某些步骤。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/65b0a3725926c195902515b16a6411d4.png"></p><p><strong>案例：订单处理</strong></p><p><font color=orange>1、定义订单处理模板</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义订单处理模板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OrderProcessTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理订单： 定义好算法骨架</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、选择商品</span></span><br><span class="line">        doSelect();</span><br><span class="line">        <span class="comment">//2、进行支付</span></span><br><span class="line">        doPayment();</span><br><span class="line">        <span class="comment">//3、开具发票</span></span><br><span class="line">        doReceipt();</span><br><span class="line">        <span class="comment">//4、派送商品</span></span><br><span class="line">        doDelivery();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSelect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doPayment</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doReceipt</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doDelivery</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>2、定义实现类：<code>NetOrder</code> 和 <code>StoreOrder</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 网络订单：算法细节实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetOrder</span> <span class="keyword">extends</span> <span class="title class_">OrderProcessTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;把 xiaomi11 加入购物车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在线微信支付 1999&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doReceipt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发票已经发送给用户邮箱： aaaa@qq.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doDelivery</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;顺丰次日达：投送商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 门店订单：子类实现具体算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreOrder</span> <span class="keyword">extends</span> <span class="title class_">OrderProcessTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户选择了：3号货架-xiaomi11 商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;刷卡机：刷卡支付 1999&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doReceipt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印发票，和物品一起包装&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doDelivery</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;把商品交给用户，用漂亮的袋子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设计模式：  多定义接口、抽象类</span></span><br><span class="line"><span class="comment"> * 1）、依赖倒置； 依赖抽象</span></span><br><span class="line"><span class="comment"> * 2）、多态；    随便替换实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 模板方法模式测试 ； 核心： 父类定义算法骨架，子类实现算法细节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 20:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMethodPatternTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//行为型模式玩的就是一个多态</span></span><br><span class="line">        <span class="comment">//1、外界调用模板类【遵循依赖反转原则】【依赖抽象而不是细节】</span></span><br><span class="line">        <span class="type">OrderProcessTemplate</span> <span class="variable">processTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetOrder</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;网络订单：&quot;</span>);</span><br><span class="line">        <span class="comment">//处理订单</span></span><br><span class="line">        processTemplate.processOrder(); <span class="comment">//定义了算法的模板</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        processTemplate = <span class="keyword">new</span> <span class="title class_">StoreOrder</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;门店订单：&quot;</span>);</span><br><span class="line">        <span class="comment">// 根据需要，选择不同的实现类，从而达到我们需要的效果：网络订单 或 门店订单</span></span><br><span class="line">        processTemplate.processOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/039d094065690f2e4da8f73e94526786.png" alt="image-20230113220611870"></p><h2 id="三、策略模式案例"><a href="#三、策略模式案例" class="headerlink" title="三、策略模式案例"></a>三、策略模式案例</h2><p><strong>描述：</strong>定义<code>算法家族，分别封装</code>起来，让它们之间可以<code>相互替换</code>，此模式让算法的变化独立于使用算法的客户。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/003b3cc3b5b54eee7bb255bde2e82ec5.png"></p><p><strong>案例：排序算法</strong></p><p><font color=orange>1、定义算法接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 算法接口：排序策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>2、定义策略类，实现算法接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 策略1：冒泡排序策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSortStrategy</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始冒泡排序....&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length- <span class="number">1</span> - i  ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序结果：&quot;</span>+ Arrays.asList(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSortStrategy</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;快速排序开始&quot;</span>);</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序结果：&quot;</span>+Arrays.asList(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>3、定义上下文对象(入口类)：持有策略对象</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 上下文：入口类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拿到一个排序算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SortStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为了强制要求用户必须传入一个排序算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SortService</span><span class="params">(SortStrategy strategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy  =strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随时动态更新排序算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(SortStrategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 才是别人调用的排序方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span>&#123;</span><br><span class="line">        strategy.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>4、使用策略对象执行算法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  模板模式定义大框架、策略默认定义小细节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 21:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyPatternTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// 传入不同的策略，就使用对应的策略</span></span><br><span class="line">        <span class="type">SortService</span> <span class="variable">sortService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SortService</span>(<span class="keyword">new</span> <span class="title class_">BubbleSortStrategy</span>());</span><br><span class="line">        sortService.sort(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新策略</span></span><br><span class="line">        sortService.setStrategy(<span class="keyword">new</span> <span class="title class_">QuickSortStrategy</span>());</span><br><span class="line">        sortService.sort(arr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/879dd90a18e7a5bc986a4bca6627a4e7.png" alt="image-20230113220248469"></p><h2 id="四、支付改造"><a href="#四、支付改造" class="headerlink" title="四、支付改造"></a>四、支付改造</h2><h3 id="4-1-思路分析"><a href="#4-1-思路分析" class="headerlink" title="4.1 思路分析"></a>4.1 思路分析</h3><p>使用<code>模板方法模式</code>：定义&#x3D;&#x3D;支付的完整流程&#x3D;&#x3D;；</p><p>使用<code>策略模式</code>：定义&#x3D;&#x3D;支付的不同实现&#x3D;&#x3D;；</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e0d3c18725c719c98d22d7b5aa1bc5a.png"></p><h3 id="4-2-实现图解："><a href="#4-2-实现图解：" class="headerlink" title="4.2 实现图解："></a>4.2 实现图解：</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/6628cf4dc83c070f9bbd822c3a45878f.png"></p><blockquote><p><strong>分析</strong>：PayStrategy使用的是策略模式~  PayService中的processNotify里面包含了 一系列抽象方法的调用,不同的支付方式会有不同的实现,这里使用了模板方法模式~</p></blockquote><h3 id="4-3-代码实现："><a href="#4-3-代码实现：" class="headerlink" title="4.3 代码实现："></a>4.3 代码实现：</h3><p><font color=orange>1、支付策略接口：<code>PayStrategy</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 支付策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持哪种支付</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(String type)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为某个订单展示收银台页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">cashierPage</span><span class="params">(OrderInfo orderInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  原生请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body     请求体数据【请求体只能读取一次，所以controller拿到以后都往下传递即可】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">checkSign</span><span class="params">(HttpServletRequest request,String body)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签错误处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">signError</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签通过返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">signOk</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签成功后处理通知数据： 把通知的所有数据封装指定对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String,Object&gt; <span class="title function_">process</span><span class="params">(HttpServletRequest request,String body)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>2、接口实现：<code>AlipayStrategy</code> 、<code>WeixinPayStrategy</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 支付宝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AlipayProperties alipayProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AlipayClient alipayClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">cashierPage</span><span class="params">(OrderInfo orderInfo)</span> &#123;</span><br><span class="line">        <span class="comment">//1、创建一个 AlipayClient</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、创建一个支付请求</span></span><br><span class="line">        <span class="type">AlipayTradePagePayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePagePayRequest</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、设置参数</span></span><br><span class="line">        alipayRequest.setReturnUrl(alipayProperties.getReturn_url()); <span class="comment">//同步回调：支付成功以后，浏览器要跳转到的页面地址</span></span><br><span class="line">        alipayRequest.setNotifyUrl(alipayProperties.getNotify_url()); <span class="comment">//通知回调：支付成功以后，支付消息会通知给这个地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//商户订单号（对外交易号）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> orderInfo.getId().toString();</span><br><span class="line">        <span class="comment">//付款金额</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">totalAmount</span> <span class="operator">=</span> orderInfo.getPrice();</span><br><span class="line">        <span class="comment">//订单名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderName</span> <span class="operator">=</span> <span class="string">&quot;尚品汇-订单-&quot;</span>+outTradeNo;</span><br><span class="line">        <span class="comment">//商品描述</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeBody</span> <span class="operator">=</span> orderInfo.getDesc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//详细：https://opendocs.alipay.com/open/028r8t?scene=22</span></span><br><span class="line">        <span class="comment">//业务参数</span></span><br><span class="line">        Map&lt;String,Object&gt; bizContent = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>,outTradeNo);</span><br><span class="line">        bizContent.put(<span class="string">&quot;total_amount&quot;</span>,totalAmount);</span><br><span class="line">        bizContent.put(<span class="string">&quot;subject&quot;</span>,orderName);</span><br><span class="line">        bizContent.put(<span class="string">&quot;body&quot;</span>,tradeBody);</span><br><span class="line">        bizContent.put(<span class="string">&quot;product_code&quot;</span>,<span class="string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);</span><br><span class="line">        <span class="comment">//自动关单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(orderInfo.getExpireTime());</span><br><span class="line">        bizContent.put(<span class="string">&quot;time_expire&quot;</span>,date);</span><br><span class="line">        alipayRequest.setBizContent(JSON.toJSONString(bizContent));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成支付页面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">page</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            page = alipayClient.pageExecute(alipayRequest).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkSign</span><span class="params">(HttpServletRequest request,String body)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; params = HttpUtils.getParameterMap(request);</span><br><span class="line">        log.info(<span class="string">&quot;支付宝通知验证签名...&quot;</span>);</span><br><span class="line">        <span class="comment">//验证签名</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用SDK验证签名</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">signVerified</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params,</span><br><span class="line">                    alipayProperties.getAlipay_public_key(), alipayProperties.getCharset(),</span><br><span class="line">                    alipayProperties.getSign_type());</span><br><span class="line">            <span class="keyword">return</span> signVerified;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">signError</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">process</span><span class="params">(HttpServletRequest request,String body)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = HttpUtils.getParameterMap(request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">        Map&lt;String, Object&gt; data = JSON.parseObject(json, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">signOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//支付宝要求成功返回 success 字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//对新增开放，对修改关闭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alipay&quot;</span>.equalsIgnoreCase(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 微信支付</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line">    <span class="comment">// 具体实现省略，可以到代码仓库查看</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>3、支付Service代码编写</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成支付收银台页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">payPage</span><span class="params">(String type, Long orderId)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理支付通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">processNotify</span><span class="params">(HttpServletRequest request,String body)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>4、支付Service实现</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 支付上下文引用支付策略； 这个上下文也是模板类；定义好算法步骤</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//模板类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;PayStrategy&gt; payStrategies; <span class="comment">//注入支付策略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成收银台页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">payPage</span><span class="params">(String type, Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">//1、查询数据库订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> getOrderInfo(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、生成支付页</span></span><br><span class="line">        <span class="keyword">for</span> (PayStrategy strategy : payStrategies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strategy.supports(type))&#123;</span><br><span class="line">                <span class="comment">//获取收银台页面</span></span><br><span class="line">                <span class="keyword">return</span> strategy.cashierPage(orderInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、如果以上都不支持，打印错误</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;不支持这种支付方式&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义通知处理模板；</span></span><br><span class="line"><span class="comment">     * 微信通知</span></span><br><span class="line"><span class="comment">     * 支付宝通知</span></span><br><span class="line"><span class="comment">     * 1）、验证签名</span></span><br><span class="line"><span class="comment">     * 2）、验证通过改订单为已支付</span></span><br><span class="line"><span class="comment">     * 3）、验证通过给支付宝(success)微信(200状态码json)返回数据</span></span><br><span class="line"><span class="comment">     * 4）、xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">processNotify</span><span class="params">(HttpServletRequest request,String body)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;不支持此方式&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、判断是那种通知</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> getNotifyType(request);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、验证签名</span></span><br><span class="line">        <span class="keyword">for</span> (PayStrategy strategy : payStrategies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strategy.supports(type))&#123;</span><br><span class="line">                <span class="comment">//签名校验</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">checkSign</span> <span class="operator">=</span> strategy.checkSign(request,body);</span><br><span class="line">                <span class="keyword">if</span>(!checkSign)&#123;</span><br><span class="line">                    log.error(<span class="string">&quot;签名验证失败，疑似攻击请求&quot;</span>);</span><br><span class="line">                    <span class="comment">//验签失败返回</span></span><br><span class="line">                   <span class="keyword">return</span> strategy.signError();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;签名验证成功，提取通知数据&quot;</span>);</span><br><span class="line">                    <span class="comment">//验签成功处理数据</span></span><br><span class="line">                    data = strategy.process(request,body);</span><br><span class="line">                    <span class="comment">//验签成功返回</span></span><br><span class="line">                    result = strategy.signOk();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、通用的后续处理算法；处理订单数据</span></span><br><span class="line">        processOrder(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理订单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; data)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 把支付成功信息等保存数据库，并修改订单状态，通知库存系统等...</span></span><br><span class="line">        log.info(<span class="string">&quot;订单支付成功，状态修改完成，已通知库存系统，详细数据：&#123;&#125;&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断通知类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getNotifyType</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;wechatpay-serial&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(header))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;weixin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">app_id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;app_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(app_id))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;alipay&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderInfo <span class="title function_">getOrderInfo</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询数据库订单：&#123;&#125;&quot;</span>,orderId);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setId(orderId);</span><br><span class="line">        orderInfo.setTitle(<span class="string">&quot;尚品汇-商城-订单&quot;</span>);</span><br><span class="line">        orderInfo.setComment(<span class="string">&quot;快点发货&quot;</span>);</span><br><span class="line">        orderInfo.setDesc(<span class="string">&quot;买了一堆商品&quot;</span>);</span><br><span class="line">        orderInfo.setPrice(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;9098.00&quot;</span>));</span><br><span class="line">        orderInfo.setExpireTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+<span class="number">30</span>*<span class="number">60</span>*<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/543a45872d4d17617504e7dea6c7119f.png" alt="image-20230113223331649"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3267819573fb85bf35740bd55b7048b1.png" alt="image-20230114125758333"></p><h3 id="4-4-效果演示"><a href="#4-4-效果演示" class="headerlink" title="4.4 效果演示"></a>4.4 效果演示</h3><p><font color=orange>1、用户进入支付页面后：</font></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b1235253e3ce038125552750ac0c3b65.png" alt="image-20230114112440663"></p><p><font color=orange>2、当选择微信支付时，进入微信二维码页面</font></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2c644c164d36791ac1dc70cda7202dc1.png" alt="image-20230114112525508"></p><p><font color=orange>3、当选择支付宝支付，进入支付宝页面</font></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9f2041ef2259893210790a38c3d2b14f.png" alt="image-20230114112626541"></p><p><font color=orange>4、支付成功之后会跳转到对应的成功页面（微信成功页面、支付宝成功页面…）</font></p><h3 id="4-5-如何扩展"><a href="#4-5-如何扩展" class="headerlink" title="4.5 如何扩展"></a>4.5 如何扩展</h3><p>最后我们需要思考一个问题，经过我们使用策略+模板改造的支付 和传统的写法有啥好处呢？</p><p>1、&#x3D;&#x3D;易于扩展&#x3D;&#x3D;，如果我们想要增加新的支付方式：银联支付、白条支付…我们只需要定义对应的支付策略类即可~ 当不需要时，直接删除对应的实现类。然后在调用的时候，会自适应使用对应的策略~ 符合<code>对修改关闭，对扩展开放</code>的特点！</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3bf9cdcfd38eae9df74d77e1b4610252.png" alt="image-20230114124615619"></p><p>2、Service中的模板方法也让我们的&#x3D;&#x3D;代码冗余度更低&#x3D;&#x3D;，逻辑更加清晰~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文教会你巧用设计模式重构项目</title>
      <link href="/2024/04/01/%E4%B8%80%E6%96%87%E6%95%99%E4%BC%9A%E4%BD%A0%E5%B7%A7%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%87%8D%E6%9E%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/04/01/%E4%B8%80%E6%96%87%E6%95%99%E4%BC%9A%E4%BD%A0%E5%B7%A7%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%87%8D%E6%9E%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><blockquote><p>本文参考自12.29日尚硅谷雷神的 <a href="https://gitee.com/leifengyang/java-design-pattern">巧妙使用设计模式重构项目</a></p></blockquote><h2 id="一、设计模式总览"><a href="#一、设计模式总览" class="headerlink" title="一、设计模式总览"></a>一、设计模式总览</h2><ul><li>总体分类</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9e402b0c6ec2bc81a317c6b8774d2c7f.png" alt="image-20230113210444492"></p><ul><li>不同时期选择不同的设计模式~</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/5ed1ffc8fb36192278f04e22eb606402.png" alt="image-20230114113220058"></p><ul><li>设计模式本质上玩的就是：<code>封装</code>，<code>继承</code>，<code>多态</code></li><li>设计模式遵循的六大原则</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/df85588b81d2d6631d201855a66ea948.png" alt="image-20230114113416409"></p><h2 id="二、模板方法模式案例"><a href="#二、模板方法模式案例" class="headerlink" title="二、模板方法模式案例"></a>二、模板方法模式案例</h2><p><strong>描述：</strong>父类（接口、抽象类）提供了一种<code>定义算法的骨架</code>，&#x3D;&#x3D;允许子类为一个或多个步骤提供实现&#x3D;&#x3D;，在不改变算法结构的情况下，重新定义算法的某些步骤。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/65b0a3725926c195902515b16a6411d4.png"></p><p><strong>案例：订单处理</strong></p><p><font color=orange>1、定义订单处理模板</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 定义订单处理模板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OrderProcessTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理订单： 定义好算法骨架</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、选择商品</span></span><br><span class="line">        doSelect();</span><br><span class="line">        <span class="comment">//2、进行支付</span></span><br><span class="line">        doPayment();</span><br><span class="line">        <span class="comment">//3、开具发票</span></span><br><span class="line">        doReceipt();</span><br><span class="line">        <span class="comment">//4、派送商品</span></span><br><span class="line">        doDelivery();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSelect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doPayment</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doReceipt</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doDelivery</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>2、定义实现类：<code>NetOrder</code> 和 <code>StoreOrder</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 网络订单：算法细节实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetOrder</span> <span class="keyword">extends</span> <span class="title class_">OrderProcessTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;把 xiaomi11 加入购物车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在线微信支付 1999&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doReceipt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发票已经发送给用户邮箱： aaaa@qq.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doDelivery</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;顺丰次日达：投送商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 门店订单：子类实现具体算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreOrder</span> <span class="keyword">extends</span> <span class="title class_">OrderProcessTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户选择了：3号货架-xiaomi11 商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;刷卡机：刷卡支付 1999&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doReceipt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印发票，和物品一起包装&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doDelivery</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;把商品交给用户，用漂亮的袋子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设计模式：  多定义接口、抽象类</span></span><br><span class="line"><span class="comment"> * 1）、依赖倒置； 依赖抽象</span></span><br><span class="line"><span class="comment"> * 2）、多态；    随便替换实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 模板方法模式测试 ； 核心： 父类定义算法骨架，子类实现算法细节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 20:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMethodPatternTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//行为型模式玩的就是一个多态</span></span><br><span class="line">        <span class="comment">//1、外界调用模板类【遵循依赖反转原则】【依赖抽象而不是细节】</span></span><br><span class="line">        <span class="type">OrderProcessTemplate</span> <span class="variable">processTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetOrder</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;网络订单：&quot;</span>);</span><br><span class="line">        <span class="comment">//处理订单</span></span><br><span class="line">        processTemplate.processOrder(); <span class="comment">//定义了算法的模板</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        processTemplate = <span class="keyword">new</span> <span class="title class_">StoreOrder</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;门店订单：&quot;</span>);</span><br><span class="line">        <span class="comment">// 根据需要，选择不同的实现类，从而达到我们需要的效果：网络订单 或 门店订单</span></span><br><span class="line">        processTemplate.processOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/039d094065690f2e4da8f73e94526786.png" alt="image-20230113220611870"></p><h2 id="三、策略模式案例"><a href="#三、策略模式案例" class="headerlink" title="三、策略模式案例"></a>三、策略模式案例</h2><p><strong>描述：</strong>定义<code>算法家族，分别封装</code>起来，让它们之间可以<code>相互替换</code>，此模式让算法的变化独立于使用算法的客户。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/003b3cc3b5b54eee7bb255bde2e82ec5.png"></p><p><strong>案例：排序算法</strong></p><p><font color=orange>1、定义算法接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 算法接口：排序策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>2、定义策略类，实现算法接口</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 策略1：冒泡排序策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSortStrategy</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始冒泡排序....&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length- <span class="number">1</span> - i  ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序结果：&quot;</span>+ Arrays.asList(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSortStrategy</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;快速排序开始&quot;</span>);</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序结果：&quot;</span>+Arrays.asList(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>3、定义上下文对象(入口类)：持有策略对象</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 上下文：入口类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-29 20:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拿到一个排序算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SortStrategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为了强制要求用户必须传入一个排序算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SortService</span><span class="params">(SortStrategy strategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy  =strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随时动态更新排序算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(SortStrategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 才是别人调用的排序方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Integer[] arr)</span>&#123;</span><br><span class="line">        strategy.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>4、使用策略对象执行算法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>  模板模式定义大框架、策略默认定义小细节</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 21:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyPatternTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// 传入不同的策略，就使用对应的策略</span></span><br><span class="line">        <span class="type">SortService</span> <span class="variable">sortService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SortService</span>(<span class="keyword">new</span> <span class="title class_">BubbleSortStrategy</span>());</span><br><span class="line">        sortService.sort(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新策略</span></span><br><span class="line">        sortService.setStrategy(<span class="keyword">new</span> <span class="title class_">QuickSortStrategy</span>());</span><br><span class="line">        sortService.sort(arr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/879dd90a18e7a5bc986a4bca6627a4e7.png" alt="image-20230113220248469"></p><h2 id="四、支付改造"><a href="#四、支付改造" class="headerlink" title="四、支付改造"></a>四、支付改造</h2><h3 id="4-1-思路分析"><a href="#4-1-思路分析" class="headerlink" title="4.1 思路分析"></a>4.1 思路分析</h3><p>使用<code>模板方法模式</code>：定义&#x3D;&#x3D;支付的完整流程&#x3D;&#x3D;；</p><p>使用<code>策略模式</code>：定义&#x3D;&#x3D;支付的不同实现&#x3D;&#x3D;；</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e0d3c18725c719c98d22d7b5aa1bc5a.png"></p><h3 id="4-2-实现图解："><a href="#4-2-实现图解：" class="headerlink" title="4.2 实现图解："></a>4.2 实现图解：</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/6628cf4dc83c070f9bbd822c3a45878f.png"></p><blockquote><p><strong>分析</strong>：PayStrategy使用的是策略模式~  PayService中的processNotify里面包含了 一系列抽象方法的调用,不同的支付方式会有不同的实现,这里使用了模板方法模式~</p></blockquote><h3 id="4-3-代码实现："><a href="#4-3-代码实现：" class="headerlink" title="4.3 代码实现："></a>4.3 代码实现：</h3><p><font color=orange>1、支付策略接口：<code>PayStrategy</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 支付策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持哪种支付</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(String type)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为某个订单展示收银台页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">cashierPage</span><span class="params">(OrderInfo orderInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  原生请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body     请求体数据【请求体只能读取一次，所以controller拿到以后都往下传递即可】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">checkSign</span><span class="params">(HttpServletRequest request,String body)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签错误处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">signError</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签通过返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">signOk</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验签成功后处理通知数据： 把通知的所有数据封装指定对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String,Object&gt; <span class="title function_">process</span><span class="params">(HttpServletRequest request,String body)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>2、接口实现：<code>AlipayStrategy</code> 、<code>WeixinPayStrategy</code></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 支付宝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AlipayProperties alipayProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AlipayClient alipayClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">cashierPage</span><span class="params">(OrderInfo orderInfo)</span> &#123;</span><br><span class="line">        <span class="comment">//1、创建一个 AlipayClient</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、创建一个支付请求</span></span><br><span class="line">        <span class="type">AlipayTradePagePayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePagePayRequest</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、设置参数</span></span><br><span class="line">        alipayRequest.setReturnUrl(alipayProperties.getReturn_url()); <span class="comment">//同步回调：支付成功以后，浏览器要跳转到的页面地址</span></span><br><span class="line">        alipayRequest.setNotifyUrl(alipayProperties.getNotify_url()); <span class="comment">//通知回调：支付成功以后，支付消息会通知给这个地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//商户订单号（对外交易号）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> orderInfo.getId().toString();</span><br><span class="line">        <span class="comment">//付款金额</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">totalAmount</span> <span class="operator">=</span> orderInfo.getPrice();</span><br><span class="line">        <span class="comment">//订单名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderName</span> <span class="operator">=</span> <span class="string">&quot;尚品汇-订单-&quot;</span>+outTradeNo;</span><br><span class="line">        <span class="comment">//商品描述</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeBody</span> <span class="operator">=</span> orderInfo.getDesc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//详细：https://opendocs.alipay.com/open/028r8t?scene=22</span></span><br><span class="line">        <span class="comment">//业务参数</span></span><br><span class="line">        Map&lt;String,Object&gt; bizContent = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>,outTradeNo);</span><br><span class="line">        bizContent.put(<span class="string">&quot;total_amount&quot;</span>,totalAmount);</span><br><span class="line">        bizContent.put(<span class="string">&quot;subject&quot;</span>,orderName);</span><br><span class="line">        bizContent.put(<span class="string">&quot;body&quot;</span>,tradeBody);</span><br><span class="line">        bizContent.put(<span class="string">&quot;product_code&quot;</span>,<span class="string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);</span><br><span class="line">        <span class="comment">//自动关单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(orderInfo.getExpireTime());</span><br><span class="line">        bizContent.put(<span class="string">&quot;time_expire&quot;</span>,date);</span><br><span class="line">        alipayRequest.setBizContent(JSON.toJSONString(bizContent));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成支付页面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">page</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            page = alipayClient.pageExecute(alipayRequest).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkSign</span><span class="params">(HttpServletRequest request,String body)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; params = HttpUtils.getParameterMap(request);</span><br><span class="line">        log.info(<span class="string">&quot;支付宝通知验证签名...&quot;</span>);</span><br><span class="line">        <span class="comment">//验证签名</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用SDK验证签名</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">signVerified</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params,</span><br><span class="line">                    alipayProperties.getAlipay_public_key(), alipayProperties.getCharset(),</span><br><span class="line">                    alipayProperties.getSign_type());</span><br><span class="line">            <span class="keyword">return</span> signVerified;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">signError</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">process</span><span class="params">(HttpServletRequest request,String body)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = HttpUtils.getParameterMap(request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(map);</span><br><span class="line">        Map&lt;String, Object&gt; data = JSON.parseObject(json, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">signOk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//支付宝要求成功返回 success 字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//对新增开放，对修改关闭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alipay&quot;</span>.equalsIgnoreCase(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 微信支付</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinPayStrategy</span> <span class="keyword">implements</span> <span class="title class_">PayStrategy</span> &#123;</span><br><span class="line">    <span class="comment">// 具体实现省略，可以到代码仓库查看</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>3、支付Service代码编写</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成支付收银台页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">payPage</span><span class="params">(String type, Long orderId)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理支付通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">processNotify</span><span class="params">(HttpServletRequest request,String body)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=orange>4、支付Service实现</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lfy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 支付上下文引用支付策略； 这个上下文也是模板类；定义好算法步骤</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-12-28 22:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//模板类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;PayStrategy&gt; payStrategies; <span class="comment">//注入支付策略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成收银台页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">payPage</span><span class="params">(String type, Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">//1、查询数据库订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> getOrderInfo(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、生成支付页</span></span><br><span class="line">        <span class="keyword">for</span> (PayStrategy strategy : payStrategies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strategy.supports(type))&#123;</span><br><span class="line">                <span class="comment">//获取收银台页面</span></span><br><span class="line">                <span class="keyword">return</span> strategy.cashierPage(orderInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、如果以上都不支持，打印错误</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;不支持这种支付方式&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义通知处理模板；</span></span><br><span class="line"><span class="comment">     * 微信通知</span></span><br><span class="line"><span class="comment">     * 支付宝通知</span></span><br><span class="line"><span class="comment">     * 1）、验证签名</span></span><br><span class="line"><span class="comment">     * 2）、验证通过改订单为已支付</span></span><br><span class="line"><span class="comment">     * 3）、验证通过给支付宝(success)微信(200状态码json)返回数据</span></span><br><span class="line"><span class="comment">     * 4）、xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">processNotify</span><span class="params">(HttpServletRequest request,String body)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;不支持此方式&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、判断是那种通知</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> getNotifyType(request);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、验证签名</span></span><br><span class="line">        <span class="keyword">for</span> (PayStrategy strategy : payStrategies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strategy.supports(type))&#123;</span><br><span class="line">                <span class="comment">//签名校验</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">checkSign</span> <span class="operator">=</span> strategy.checkSign(request,body);</span><br><span class="line">                <span class="keyword">if</span>(!checkSign)&#123;</span><br><span class="line">                    log.error(<span class="string">&quot;签名验证失败，疑似攻击请求&quot;</span>);</span><br><span class="line">                    <span class="comment">//验签失败返回</span></span><br><span class="line">                   <span class="keyword">return</span> strategy.signError();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;签名验证成功，提取通知数据&quot;</span>);</span><br><span class="line">                    <span class="comment">//验签成功处理数据</span></span><br><span class="line">                    data = strategy.process(request,body);</span><br><span class="line">                    <span class="comment">//验签成功返回</span></span><br><span class="line">                    result = strategy.signOk();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、通用的后续处理算法；处理订单数据</span></span><br><span class="line">        processOrder(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理订单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; data)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 把支付成功信息等保存数据库，并修改订单状态，通知库存系统等...</span></span><br><span class="line">        log.info(<span class="string">&quot;订单支付成功，状态修改完成，已通知库存系统，详细数据：&#123;&#125;&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断通知类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getNotifyType</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;wechatpay-serial&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(header))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;weixin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">app_id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;app_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(app_id))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;alipay&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OrderInfo <span class="title function_">getOrderInfo</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询数据库订单：&#123;&#125;&quot;</span>,orderId);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setId(orderId);</span><br><span class="line">        orderInfo.setTitle(<span class="string">&quot;尚品汇-商城-订单&quot;</span>);</span><br><span class="line">        orderInfo.setComment(<span class="string">&quot;快点发货&quot;</span>);</span><br><span class="line">        orderInfo.setDesc(<span class="string">&quot;买了一堆商品&quot;</span>);</span><br><span class="line">        orderInfo.setPrice(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;9098.00&quot;</span>));</span><br><span class="line">        orderInfo.setExpireTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+<span class="number">30</span>*<span class="number">60</span>*<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/543a45872d4d17617504e7dea6c7119f.png" alt="image-20230113223331649"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3267819573fb85bf35740bd55b7048b1.png" alt="image-20230114125758333"></p><h3 id="4-4-效果演示"><a href="#4-4-效果演示" class="headerlink" title="4.4 效果演示"></a>4.4 效果演示</h3><p><font color=orange>1、用户进入支付页面后：</font></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b1235253e3ce038125552750ac0c3b65.png" alt="image-20230114112440663"></p><p><font color=orange>2、当选择微信支付时，进入微信二维码页面</font></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2c644c164d36791ac1dc70cda7202dc1.png" alt="image-20230114112525508"></p><p><font color=orange>3、当选择支付宝支付，进入支付宝页面</font></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9f2041ef2259893210790a38c3d2b14f.png" alt="image-20230114112626541"></p><p><font color=orange>4、支付成功之后会跳转到对应的成功页面（微信成功页面、支付宝成功页面…）</font></p><h3 id="4-5-如何扩展"><a href="#4-5-如何扩展" class="headerlink" title="4.5 如何扩展"></a>4.5 如何扩展</h3><p>最后我们需要思考一个问题，经过我们使用策略+模板改造的支付 和传统的写法有啥好处呢？</p><p>1、&#x3D;&#x3D;易于扩展&#x3D;&#x3D;，如果我们想要增加新的支付方式：银联支付、白条支付…我们只需要定义对应的支付策略类即可~ 当不需要时，直接删除对应的实现类。然后在调用的时候，会自适应使用对应的策略~ 符合<code>对修改关闭，对扩展开放</code>的特点！</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3bf9cdcfd38eae9df74d77e1b4610252.png" alt="image-20230114124615619"></p><p>2、Service中的模板方法也让我们的&#x3D;&#x3D;代码冗余度更低&#x3D;&#x3D;，逻辑更加清晰~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储引擎</title>
      <link href="/2024/04/01/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2024/04/01/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335455.png" alt="image-20220713231227788"></p><h1 id="1-查看存储引擎"><a href="#1-查看存储引擎" class="headerlink" title="1. 查看存储引擎"></a>1. 查看存储引擎</h1><p>查看mysql提供什么存储引擎:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335257.png" alt="image-20220713223052510"></p><h1 id="2-设置系统默认的存储引擎"><a href="#2-设置系统默认的存储引擎" class="headerlink" title="2. 设置系统默认的存储引擎"></a>2. 设置系统默认的存储引擎</h1><ul><li><p>查看默认的存储引擎:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%storage_engine%&#x27;; </span><br><span class="line">#或</span><br><span class="line">SELECT @@default_storage_engine;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335167.png" alt="image-20220713223312035"></p></li><li><p>修改默认的存储引擎</p><p>如果在创建表的语句中没有显式指定表的存储引擎的话，那就会默认使用 <code>InnoDB</code> 作为表的存储引擎。 如果我们想改变表的默认存储引擎的话，可以这样写启动服务器的命令行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET DEFAULT_STORAGE_ENGINE=MyISAM;</span><br></pre></td></tr></table></figure><p>或者修改 <code>my.cnf</code> 文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default-storage-engine=MyISAM</span><br><span class="line"># 重启服务</span><br><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-设置表的存储引擎"><a href="#3-设置表的存储引擎" class="headerlink" title="3. 设置表的存储引擎"></a>3. 设置表的存储引擎</h1><p>存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为 <code>不同的表设置不同的存储引擎</code> ，也就是说不同的表可以有不同的物理存储结构，不同的提取和写入方式。</p><h2 id="3-1-创建表时指定存储引擎"><a href="#3-1-创建表时指定存储引擎" class="headerlink" title="3.1 创建表时指定存储引擎"></a>3.1 创建表时指定存储引擎</h2><p>我们之前创建表的语句都没有指定表的存储引擎，那就会使用默认的存储引擎 <code>InnoDB</code> 。如果我们想显式的指定一下表的存储引擎，那可以这么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名( </span><br><span class="line">  建表语句;</span><br><span class="line">) ENGINE = 存储引擎名称;</span><br></pre></td></tr></table></figure><h2 id="3-2-修改表的存储引擎"><a href="#3-2-修改表的存储引擎" class="headerlink" title="3.2 修改表的存储引擎"></a>3.2 修改表的存储引擎</h2><p>如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ENGINE = 存储引擎名称; </span><br></pre></td></tr></table></figure><p>比如我们修改一下 <code>engine_demo_table</code> 表的存储引擎:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE engine_demo_table ENGINE = InnoDB;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p>这时我们再查看一下 <code>engine_demo_table</code> 的表结构:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> engine_demo_table\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">Table</span>: engine_demo_table</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `engine_demo_table` (</span><br><span class="line">  `i` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到该表的存储引擎已经改为<code>InnoDB</code>了。</p><h1 id="4-引擎介绍"><a href="#4-引擎介绍" class="headerlink" title="4. 引擎介绍"></a>4. 引擎介绍</h1><h2 id="4-1-InnoDB-引擎：具备-外键-支持功能的事务存储引擎"><a href="#4-1-InnoDB-引擎：具备-外键-支持功能的事务存储引擎" class="headerlink" title="4.1 InnoDB 引擎：具备&#x3D;&#x3D;外键&#x3D;&#x3D;支持功能的事务存储引擎"></a>4.1 InnoDB 引擎：具备&#x3D;&#x3D;外键&#x3D;&#x3D;支持功能的事务存储引擎</h2><ul><li>MySQL 从 3.23.34a 开始就包含 InnoDB 存储引擎。<code>大于等于 5.5 之后，默认采用 InnoDB 引擎</code> </li><li>InnoDB 是 MySQL 的 &#x3D;&#x3D;默认事务型引擎&#x3D;&#x3D; ，它被设计用来处理大量的短期（short-lived）事务。可以确保事务的完整提交（Commit）和回滚（Rollback）。</li><li>&#x3D;&#x3D;除了增加和查询外，还需要更新、删除操作&#x3D;&#x3D;，那么，应优先选择 InnoDB 存储引擎。</li><li><strong>除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎</strong>。 数据文件结构：</li><li><code>表名.frm</code> 存储表结构（MySQL8.0时，合并在表名.ibd中）</li><li><code>表名.ibd</code> 存储数据和索引</li><li>&#x3D;&#x3D;InnoDB是 为处理巨大数据量的最大性能设计&#x3D;&#x3D;。<ul><li>在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除了。比如：<code>.frm</code> ， <code>.par</code> ， <code>.trn</code> ， <code>.isl</code> ， 等都在 MySQL 8.0 中不存在了。</li></ul></li><li>对比 MyISAM 的存储引擎，<code>InnoDB写的处理效率差一些</code> ，并且会占用更多的磁盘空间以保存数据和索引。</li><li>MyISAM 只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据(加载数据时，也要加载索引)，<code>对内存要求较高</code> ，而且内存大小对性能有决定性的影响。</li></ul><h2 id="4-2-MyISAM-引擎：主要的非事务处理存储引擎"><a href="#4-2-MyISAM-引擎：主要的非事务处理存储引擎" class="headerlink" title="4.2 MyISAM 引擎：主要的非事务处理存储引擎"></a>4.2 MyISAM 引擎：主要的非事务处理存储引擎</h2><ul><li>MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数（GIS）等，但 MyISAM <code>不支持事务、行级锁、外键</code>，有一个毫无疑问的缺陷就是 <code>崩溃后无法安全恢复</code>。</li><li><code>5.5 之前默认的存储引擎</code></li><li>优势是访问的 <code>速度快</code> ，对事务完整性没有要求或者以 SELECT、INSERT 为主的应用</li><li>针对数据统计有额外的常数存储。故而<code>count(*)</code> 的查询效率很高</li><li>数据文件结构<ul><li><code>表名.frm</code> 存储表结构</li><li><code>表名.MYD</code> 存储数据（MYData）</li><li><code>表名.MYI</code> 存储索引（MYIndex）</li></ul></li><li>应用场景:只读应用或者以读为主的业务</li></ul><h2 id="4-3-Archive-引擎：用于数据存档"><a href="#4-3-Archive-引擎：用于数据存档" class="headerlink" title="4.3 Archive 引擎：用于数据存档"></a>4.3 Archive 引擎：用于数据存档</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335661.png" alt="image-20220713231445827"></p><p>下表展示了 ARCHIVE 存储引擎功能：</p><table><thead><tr><th align="left">特征</th><th align="left">支持</th></tr></thead><tbody><tr><td align="left">B树索引</td><td align="left">不支持</td></tr><tr><td align="left"><code>备份/时间点恢复</code>(在服务器中实现，而不是在存储引擎中)</td><td align="left">支持</td></tr><tr><td align="left">集群数据库支持</td><td align="left">不支持</td></tr><tr><td align="left">聚集索引</td><td align="left">不支持</td></tr><tr><td align="left">压缩数据</td><td align="left">支持</td></tr><tr><td align="left">数据缓存</td><td align="left">不支持</td></tr><tr><td align="left">加密数据(加密功能在服务器中实现)</td><td align="left">支持</td></tr><tr><td align="left">外键支持</td><td align="left">不支持</td></tr><tr><td align="left">全文检索索引</td><td align="left">不支持</td></tr><tr><td align="left">地理空间数据类型支持</td><td align="left">支持</td></tr><tr><td align="left">地理空间索引支持</td><td align="left">不支持</td></tr><tr><td align="left">哈希索引</td><td align="left">不支持</td></tr><tr><td align="left">索引缓存</td><td align="left">不支持</td></tr><tr><td align="left"><code>锁粒度</code></td><td align="left">行锁</td></tr><tr><td align="left">MVCC</td><td align="left">不支持</td></tr><tr><td align="left">存储限制</td><td align="left">没有任何限制</td></tr><tr><td align="left">交易</td><td align="left">不支持</td></tr><tr><td align="left">更新数据字典的统计信息</td><td align="left">支持</td></tr></tbody></table><h2 id="4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容"><a href="#4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容" class="headerlink" title="4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容"></a>4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335029.png" alt="image-20220713231926786"></p><h2 id="4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项"><a href="#4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项" class="headerlink" title="4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项"></a>4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项</h2><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335774.png" alt="image-20220713232053842"></p><p>使用案例如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (i <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, c <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>) ENGINE <span class="operator">=</span> CSV;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.06</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;record one&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;record two&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line">Records: <span class="number">2</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test; </span><br><span class="line"><span class="operator">+</span><span class="comment">---+------------+</span></span><br><span class="line"><span class="operator">|</span>i  <span class="operator">|</span>c           <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> record <span class="keyword">one</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> record two <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建 CSV 表还会创建相应的 <code>元文件</code> ，用于 <code>存储表的状态</code> 和 <code>表中存在的行数</code> 。此文件的名称与表的名称相 同，后缀为 <code>CSM</code>。如图所示</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335054.png" alt="image-20220713232615402"></p><p>如果检查 <code>test.CSV</code> 通过执行上述语句创建的数据库目录中的文件，其内容使用Notepad++打开如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;1&quot;,&quot;record one&quot;</span><br><span class="line">&quot;2&quot;,&quot;record two&quot;</span><br></pre></td></tr></table></figure><p>这种格式可以被 Microsoft Excel 等电子表格应用程序读取，甚至写入。使用 Microsoft Excel 打开如图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132335502.png" alt="image-20220713232637071"></p><h2 id="4-6-Memory-引擎：置于内存的表"><a href="#4-6-Memory-引擎：置于内存的表" class="headerlink" title="4.6 Memory 引擎：置于内存的表"></a>4.6 Memory 引擎：置于内存的表</h2><p><strong>概述:</strong></p><p>Memory 采用的逻辑介质是 <code>内存 ， 响应速度很快</code> ，但是当mysqld守护进程崩溃的时候 <code>数据会丢失</code> 。另 外，要求存储的数据是数据长度不变的格式，比如，Blob 和 Text 类型的数据不可用。</p><p><strong>主要特征:</strong></p><ul><li>Memory 同时 <code>支持哈希（HASH）索引</code>和 <code>B+树索引</code> 。</li><li>Memory 表至少比 MyISAM表 要 <code>快一个数量级</code>。</li><li>MEMORY <code>表的大小是受限制</code>的。表的大小主要取决于两个参数，分别是 <code>max_rows</code> 和<code>max_heap_table_size</code>。其中，max_rows可以在创建表时指定；max_heap_table_size 的大小默认为 16 MB，可以按需要进行扩大。</li><li>数据文件与索引文件分开存储。</li><li>缺点：其数据易丢失，生命周期短。基于这个缺陷，选择 MEMORY 存储引擎时需要特别小心。</li></ul><p><strong>使用Memory存储引擎的场景:</strong></p><ol><li><code>目标数据比较小</code>，而且非常 <code>频繁的进行访问</code>，在内存中存放数据，如果太大的数据会造成 <code>内存溢出</code> 。可以通过参数 <code>max_heap_table_size</code> 控制 Memory 表的大小，限制 Memory 表的最大的大小。</li><li>如果 <code>数据是临时的</code> ，而且 <code>必须立即可用</code> 得到，那么就可以放在内存中。</li><li>存储在 Memory 表中的数据如果突然间 <code>丢失的话也没有太大的关系</code>。</li></ol><h2 id="4-7-Federated-引擎：访问远程表"><a href="#4-7-Federated-引擎：访问远程表" class="headerlink" title="4.7 Federated 引擎：访问远程表"></a>4.7 Federated 引擎：访问远程表</h2><p>Federated 引擎是访问其他MySQL服务器的一个 代理 ，尽管该引擎看起来提供了一种很好的跨服务器的灵活性 ，但也经常带来问题，因此默认是禁用的 。</p><h2 id="4-8-Merge-引擎：管理多个MyISAM表构成的表集合"><a href="#4-8-Merge-引擎：管理多个MyISAM表构成的表集合" class="headerlink" title="4.8 Merge 引擎：管理多个MyISAM表构成的表集合"></a>4.8 Merge 引擎：管理多个MyISAM表构成的表集合</h2><h2 id="4-9-NDB引擎：MySQL集群专用存储引擎"><a href="#4-9-NDB引擎：MySQL集群专用存储引擎" class="headerlink" title="4.9 NDB引擎：MySQL集群专用存储引擎"></a>4.9 NDB引擎：MySQL集群专用存储引擎</h2><p>也叫做 NDB Cluster 存储引擎，主要用于 <code>MySQL Cluster 分布式集群</code> 环境。</p><h2 id="4-10-引擎对比"><a href="#4-10-引擎对比" class="headerlink" title="4.10 引擎对比"></a>4.10 引擎对比</h2><p>MySQL中同一个数据库，不同的表可以选择不同的存储引擎。如下表对常用存储引擎做出了对比。</p><table><thead><tr><th align="left">特点</th><th align="left">MyISAM</th><th align="left">InnoDB</th><th align="left">MEMORY</th><th align="left">MERGE</th><th align="left">NDB</th></tr></thead><tbody><tr><td align="left">存储限制</td><td align="left">有</td><td align="left">64TB</td><td align="left">有</td><td align="left">没有</td><td align="left">有</td></tr><tr><td align="left"><code>事务安全性</code></td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>锁机制</code></td><td align="left">表锁，即使操作一条 记录也会锁住整个表，不适合高并发的操作</td><td align="left">行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td><td align="left">表锁</td><td align="left">表锁</td><td align="left">行锁</td></tr><tr><td align="left">B树索引</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">哈希索引</td><td align="left"></td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left">支持</td></tr><tr><td align="left">全文索引</td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">集群索引</td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">数据缓存</td><td align="left"></td><td align="left">支持</td><td align="left">支持</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>索引缓存</code></td><td align="left">只缓存索引，不缓存真实数据</td><td align="left">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr><tr><td align="left">数据可压缩</td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">空间使用</td><td align="left">低</td><td align="left">高</td><td align="left">N&#x2F;A</td><td align="left">低</td><td align="left">低</td></tr><tr><td align="left">内存使用</td><td align="left">低</td><td align="left">高</td><td align="left">中等</td><td align="left">低</td><td align="left">高</td></tr><tr><td align="left">批量插入的速度</td><td align="left">高</td><td align="left">低</td><td align="left">高</td><td align="left">高</td><td align="left">高</td></tr><tr><td align="left"><code>支持外键</code></td><td align="left"></td><td align="left">支持</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h1 id="5-MyISAM-和-InnoDB"><a href="#5-MyISAM-和-InnoDB" class="headerlink" title="5. MyISAM 和 InnoDB"></a>5. MyISAM 和 InnoDB</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132336896.png" alt="image-20220713230507218"></p><table><thead><tr><th align="center">对比项</th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="center">外键</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">事务</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">行表锁</td><td align="center">表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td align="center">行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td></tr><tr><td align="center">缓存</td><td align="center">只缓存索引，不缓存真实数据</td><td align="center">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td></tr><tr><td align="center">自带系统表使用</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">关注点</td><td align="center">性能：节省资源、消耗少、简单业务</td><td align="center">事务：并发写、事务、更大资源</td></tr><tr><td align="center">默认安装</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">默认使用</td><td align="center">N</td><td align="center">Y</td></tr></tbody></table><h1 id="6-阿里巴巴、淘宝用哪个"><a href="#6-阿里巴巴、淘宝用哪个" class="headerlink" title="6. 阿里巴巴、淘宝用哪个"></a>6. 阿里巴巴、淘宝用哪个</h1><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207132336908.png" alt="image-20220713230922017"></p><ul><li><strong>Percona</strong> 为 MySQL 数据库服务器进行了改进，在功能和性能上较 MySQL 有很显著的提升。</li><li>该版本提升了在高负载情况下的 InnoDB 的性能、为 DBA 提供一些非常有用的性能诊断工具；另外有更多的参数和命令来控制服务器行为。</li><li>该公司新建了一款存储引擎叫 <code>Xtradb</code> 完全可以替代<code>Innodb</code> ，并且在性能和并发上做得更好</li><li>阿里巴巴大部分 MySQL 数据库其实使用的 percona 的原型加以修改。</li></ul><h1 id="7-补充"><a href="#7-补充" class="headerlink" title="7. 补充:"></a>7. 补充:</h1><h2 id="7-1-InnoDB-表的优势"><a href="#7-1-InnoDB-表的优势" class="headerlink" title="7.1 InnoDB 表的优势"></a>7.1 InnoDB 表的优势</h2><p>InnoDB 存储引擎在实际应用中拥有诸多优势，比如操作便利、提高了数据库的性能、维护成本低等。如果由于硬件或软件的原因导致服务器崩溃，那么在重启服务器之后不需要进行额外的操作。InnoDB 崩溃恢复功能自动将之前提交的内容定型，然后撤销没有提交的进程，重启之后继续从崩溃点开始执行。</p><p>InnoDB 存储引擎在主内存中维护缓冲池，高频率使用的数据将在内存中直接被处理。这种缓存方式应用于多种信息，加速了处理进程。</p><p>在专用服务器上，物理内存中高达 80% 的部分被应用于缓冲池。如果需要将数据插入不同的表中，可以设置外键加强数据的完整性。更新或者删除数据，关联数据将会被自动更新或删除。如果试图将数据插入从表，但在主表中没有对应的数据，插入的数据将被自动移除。如果磁盘或内存中的数据出现崩溃， 在使用脏数据之前，校验和机制会发出警告。当每个表的主键都设置合理时，与这些列有关的操作会被自动优化。插入、更新和删除操作通过做改变缓冲自动机制进行优化。<code>InnoDB 不支持当前读写，也会缓冲改变的数据到数据流磁盘</code>.</p><p>InnoDB 的性能优势不只存在于长时运行查询的大型表。在同一列多次被查询时，自适应哈希索引会提高查询的速度。使用 InnoDB 可以压缩表和相关的索引，可以 <code>在不影响性能和可用性的情况下创建或删除索引</code>。对于大型文本和 BLOB 数据，使用动态行形式，这种存储布局更高效。通过查询 INFORMATION_SCHEMA 库中的表可以监控存储引擎的内部工作。在同一个语句中，InnoDB 表可以与其他存储引擎表混用。即使有些操作系统限制文件大小为 2GB，InnoDB 仍然可以处理。<code>当处理大数据量时，InnoDB 兼顾 CPU，以达到最大性能</code></p><h2 id="7-2-InnoDB-和-ACID-模型"><a href="#7-2-InnoDB-和-ACID-模型" class="headerlink" title="7.2 InnoDB 和 ACID 模型"></a>7.2 InnoDB 和 ACID 模型</h2><p>ACID 模型是一系列数据库设计规则，这些规则着重强调可靠性，而可靠性对于商业数据和任务关键型应用非常重要。MySQL 包含类似 InnoDB 存储引擎的组件，与 ACID 模型紧密相连，这样出现意外时，数据不会崩溃，结果不会失真。如果依赖 ACID 模型，可以不使用一致性检查和崩溃恢复机制。如果拥有额外的软件保护，极可靠的硬件或者应用可以容忍一小部分的数据丢失和不一致，可以将 MySQL 设置调整为只依赖部分 ACID 特性，以达到更高的性能。下面讲解 InnoDB 存储引擎与 ACID 模型相同作用的四个方面。</p><ol><li><strong>原子方面</strong> ACID 的原子方面主要涉及 InnoDB 事务，与 MySQL 相关的特性主要包括:<ul><li>自动提交设置。</li><li>COMMIT 语句。</li><li>ROLLBACK 语句。</li><li>操作 INFORMATION_SCHEMA 库中的表数据。</li></ul></li><li><strong>一致性方面</strong> ACID 模型的一致性主要涉及保护数据不崩溃的内部 InnoDB 处理过程，与 MySQL 相关的特性主要包括:<ul><li>InnoDB 双写缓存。</li><li>InnoDB 崩溃恢复。</li></ul></li><li><strong>隔离方面</strong> 隔离是应用于事务的级别，与 MySQL 相关的特性主要包括:<ul><li>自动提交设置。</li><li>SET ISOLATION LEVEL 语句。</li><li>InnoDB 锁的低级别信息。</li></ul></li><li><strong>耐久性方面</strong> ACID 模型的耐久性主要涉及与硬件配置相互影响的 MySQL 软件特性。由于硬件复杂多样化，耐久性方面没有具体的规则可循。与 MySQL 相关的特性有:<ul><li>InnoDB 双写缓存，通过 innodb_doublewrite 配置项配置。</li><li>配置项 innodb_flush_log_at_trx_commit。</li><li>配置项 sync_binlog。</li><li>配置项 innodb_file_per_table。</li><li>存储设备的写入缓存。</li><li>存储设备的备用电池缓存。</li><li>运行 MySQL 的操作系统。</li><li>持续的电力供应。</li><li>备份策略。</li><li>对分布式或托管的应用，最主要的在于硬件设备的地点以及网络情况。</li></ul></li></ol><h2 id="7-3-InnoDB架构"><a href="#7-3-InnoDB架构" class="headerlink" title="7.3 InnoDB架构"></a>7.3 InnoDB架构</h2><ol><li><strong>缓冲池</strong> 缓冲池是主内存中的一部分空间，用来缓存已使用的表和索引数据。缓冲池使得经常被使用的数据能够直接在内存中获得，从而提高速度。</li><li><strong>更改缓存</strong> 更改缓存是一个特殊的数据结构，当受影响的索引页不在缓存中时，更改缓存会缓存辅助索引页的更改。索引页被其他读取操作时会加载到缓存池，缓存的更改内容就会被合并。不同于集群索引，辅助索引并非独一无二的。当系统大部分闲置时，清除操作会定期运行，将更新的索引页刷入磁 盘。更新缓存合并期间，可能会大大降低查询的性能。在内存中，更新缓存占用一部分 InnoDB 缓冲池。 在磁盘中，更新缓存是系统表空间的一部分。更新缓存的数据类型由 innodb_change_buffering 配置项管理。</li><li><strong>自适应哈希索引</strong> 自适应哈希索引将负载和足够的内存结合起来，使得 InnoDB 像内存数据库一样运行， 不需要降低事务上的性能或可靠性。这个特性通过 innodb_adaptive_hash_index 选项配置，或者通过 <code>-- skip-innodb_adaptive_hash_index</code> 命令行在服务启动时关闭。</li><li><strong>重做日志缓存</strong> 重做日志缓存存放要放入重做日志的数据。重做日志缓存大小通过 innodb_log_buffer_size 配置项配置。重做日志缓存会定期地将日志文件刷入磁盘。大型的重做日志缓存使得大型事务能够正常运行而不需要写入磁盘。</li><li><strong>系统表空间</strong> 系统表空间包括 InnoDB 数据字典、双写缓存、更新缓存和撤销日志，同时也包括表和索引数据。多表共享，系统表空间被视为共享表空间。</li><li><strong>双写缓存</strong> 双写缓存位于系统表空间中，用于写入从缓存池刷新的数据页。只有在刷新并写入双写缓存后，InnoDB 才会将数据页写入合适的位置。</li><li><strong>撤销日志</strong> 撤销日志是一系列与事务相关的撤销记录的集合，包含如何撤销事务最近的更改。如果其他事务要查询原始数据，可以从撤销日志记录中追溯未更改的数据。撤销日志存在于撤销日志片段中，这些片段包含于回滚片段中。</li><li><strong>每个表一个文件的表空间</strong> 每个表一个文件的表空间是指每个单独的表空间创建在自身的数据文件中， 而不是系统表空间中。这个功能通过 innodb_file_per_table 配置项开启。每个表空间由一个单独的 <code>.ibd</code> 数据文件代表，该文件默认被创建在数据库目录中。</li><li><strong>通用表空间</strong> 使用 CREATE TABLESPACE 语法创建共享的 InnoDB 表空间。通用表空间可以创建在 MySQL 数据目录之外能够管理多个表并支持所有行格式的表。</li><li><strong>撤销表空间</strong> 撤销表空间由一个或多个包含撤销日志的文件组成。撤销表空间的数量由 innodb_undo_tablespaces 配置项配置。</li><li><strong>临时表空间</strong> 用户创建的临时表空间和基于磁盘的内部临时表都创建于临时表空间。 innodb_temp_data_file_path 配置项定义了相关的路径、名称、大小和属性。如果该值为空，默认会在 innodb_data_home_dir 变量指定的目录下创建一个自动扩展的数据文件。</li><li><strong>重做日志</strong> 重做日志是基于磁盘的数据结构，在崩溃恢复期间使用，用来纠正数据。正常操作期间， 重做日志会将请求数据进行编码，这些请求会改变 InnoDB 表数据。遇到意外崩溃后，未完成的更改会自动在初始化期间重新进行。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑架构分析</title>
      <link href="/2024/04/01/%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
      <url>/2024/04/01/%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1-逻辑架构剖析"><a href="#1-逻辑架构剖析" class="headerlink" title="1. 逻辑架构剖析"></a>1. 逻辑架构剖析</h1><h2 id="1-1-服务器处理客户端请求"><a href="#1-1-服务器处理客户端请求" class="headerlink" title="1.1 服务器处理客户端请求"></a>1.1 服务器处理客户端请求</h2><p>首先MySQL是典型的C&#x2F;S架构，即<code>Client/Server</code> 架构‘ ， 服务器端程序使用的mysqld。</p><p>不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是:<strong>客户端进程向服务器进程发送一段文本(SQL语句) ,服务器进程处理后再向客户端进程发送一段文本(处理结果)</strong></p><p>那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢?这里以查询请求为例展示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116081.png" alt="image-20220709175522383"></p><p>下面具体展开看一下:(针对MySQL5.7)</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116304.png" alt="image-20220115171412362"></p><p><strong>分析</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116078.png"></p><h2 id="1-2-Connectors"><a href="#1-2-Connectors" class="headerlink" title="1.2 Connectors"></a>1.2 Connectors</h2><p>Connectors指的是不同语言中与SQL的交互。MySQL首先是一 个网络程序，在TCP之上定义了自己的应用层协议。所以要使用MySQL,我们可以编写代码，跟MySQL Server<code>建立TCP连接</code>，之后按照其定义好的协议进行交互。或者比较方便的办法是调用SDK，比如Native C API、JDBC、 PHP等各语 言MySQL Connector,或者通过ODBC。 但&#x3D;&#x3D;通过SDK来访问MySQL，本质上还是在TCP连接上通过MySQL协议跟MySQL进行交互&#x3D;&#x3D;。</p><p>接下来的MySQL Server结构可以分为如下的三层：</p><h2 id="1-3-第-1-层：连接层"><a href="#1-3-第-1-层：连接层" class="headerlink" title="1.3 第 1 层：连接层"></a>1.3 第 1 层：连接层</h2><p>系统(客户端)访问 MySQL 服务器前，做的第一件事就是建立 <code>TCP</code> 连接。 经过三次握手建立连接成功后，MySQL 服务器对 <code>TCP</code> 传输过来的账号密码做身份认证、权限获取。</p><ul><li>用户名或密码不对，会收到一个 Access denied for user 错误，客户端程序结束执行</li><li>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</li></ul><p><code>TCP</code> 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><p><strong>接着我们来思考一个问题</strong></p><p>&#x3D;&#x3D;一个系统只会和MySQL服务器建立一个连接吗？只能有一个系统和MySQL服务 器建立连接吗？&#x3D;&#x3D;<br>当然不是，多个系统都可以和MySQL服务器建立连接，每个系统建立的连接肯定不止一个。所以，为了解决TCP无限创建与TCP频繁创建销毁带来的资源耗尽、性能下降问题。MySQL服务器里有专门的<code>TCP连接池</code>限制连接数，采用<code>长连接模式</code>复用TCP连接,来解决上述问题。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116686.png" alt="image-20220709192708094"></p><p><code>TCP</code>连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><p>这些内容我们都归纳到<code>MySQL</code>的连接管理组件中。</p><p>所以&#x3D;&#x3D;连接管理的职责是负责认证、管理连接、获取权限信息&#x3D;&#x3D;。</p><h2 id="1-4-第-2-层：服务层"><a href="#1-4-第-2-层：服务层" class="headerlink" title="1.4 第 2 层：服务层"></a>1.4 第 2 层：服务层</h2><p>第二层架构主要完成大多数的核心服务功能，如SQL接口， 并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。</p><p>在该层，服务器会<strong>解析查询</strong>并创建相应的内部<strong>解析树</strong>，并对其完成相应的<strong>优化</strong>：如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。</p><p>&#x3D;&#x3D;如果是SELECT语句，服务器还会查询内部的缓存&#x3D;&#x3D;。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><ul><li><p><strong>SQL Interface：SQL接口</strong></p><ul><li>接收用户的 SQL 命令，并且返回用户需要查询的结果。比如 <code>SELECT ... FROM</code> 就是调用 SQL Interface</li><li>MySQL 支持 DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种 SQL 语言接口</li></ul></li><li><p><strong>Parser：解析器</strong></p><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将 SQL 语句分解成数据结构，并将这个结构传递到后续步骤，以后 SQL 语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个 SQL 语句是不合理的。</li><li>在 SQL 命令传递到解析器的时候会被解析器验证和解析，并为其创建 <code>语法树</code>，并根据数据字典丰富查询语法树，会 <code>验证该客户端是否具有执行该查询的权限</code> 。创建好语法树后，MySQL 还会对 SQL 查询进行语法上的优化，进行查询重写。</li></ul></li><li><p><strong>Optimizer：查询优化器</strong></p><ul><li><p>SQL 语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个 <code>执行计划</code> 。</p></li><li><p>这个执行计划表明应该 <code>使用哪些索引</code> 进行查询（全表检索还是使用索引检索），表之间的连接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。</p></li><li><p>它使用“ <code>选取-投影-连接</code> ”策略进行查询。例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个 SELECT 查询先根据 WHERE 语句进行选取 ，而不是将表全部查询出来以后再进行 gender 过滤。 这个 SELECT 查询先根据 id 和 name 进行属性投影 ，而不是将属性全部取出以后再进行过滤，将这两个查询条件 连接起来生成最终查询结果。</p></li></ul></li><li><p><strong>Caches &amp; Buffers: 查询缓存组件</strong></p><ul><li>MySQL内部维持着一些 Cache 和 Buffer，比如 Query Cache 用来缓存一条 SELECT 语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li><li>这个查询缓存可以在 <code>不同客户端之间共享</code> 。</li><li>从 MySQL 5.7.20 开始，不推荐使用查询缓存，并在 <code>MySQL 8.0中删除</code> 。</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小故事：</span><br><span class="line">如果我问你9+8×16-3×2×17的值是多少，你可能会用计算器去算一下，最终结果35。如果再问你一遍9+8×16-</span><br><span class="line">3×2×17的值是多少，你还用再傻呵呵的再算一遍吗？我们刚刚已经算过了，直接说答案就好了。</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-5-第-3-层：引擎层"><a href="#1-5-第-3-层：引擎层" class="headerlink" title="1.5 第 3 层：引擎层"></a>1.5 第 3 层：引擎层</h2><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用，主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。同时开源的 MySQL还<strong>允许开发人员设置自己的存储引擎</strong>。</p><p>这种高效的模块化架构为那些希望专门针对特定应用程序需求(例如数据仓库、事务处理或高可用性情况)的人提供了巨大的好处，同时享受使用一组独立于任何接口和服务的优势存储引擎。</p><p>插件式存储引擎层（Storage Engines），&#x3D;&#x3D;真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作&#x3D;&#x3D; ，服务器通过 API 与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</p><p>MySQL 8.0.25 默认支持的存储引擎如下:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116558.png" alt="image-20220115171937681"></p><h2 id="1-6-存储层"><a href="#1-6-存储层" class="headerlink" title="1.6 存储层"></a>1.6 存储层</h2><p>所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在 <code>文件系统</code> 上，以 <code>文件</code> 的方式存 在的，并完成与存储引擎的交互。当然有些存储引擎比如InnoDB，也支持不使用文件系统直接管理裸设备，但现代文件系统的实现使得这样做没有必要了。在文件系统之下，可以使用本地磁盘，可以使用 DAS、NAS、SAN等各种存储系统。</p><h2 id="1-7-小结"><a href="#1-7-小结" class="headerlink" title="1.7 小结"></a>1.7 小结</h2><p>MySQL 架构图本节开篇所示。下面为了熟悉 SQL 执行流程方便，我们可以简化如下:</p><p><img src="https://blog-images-1309598269.cos.ap-beijing.myqcloud.com/blogImgs/202206300055402.png" alt="image-20220115172118991"></p><p>简化为三层结构：</p><ol><li>连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端;</li><li>SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关;</li><li>存储引擎层：与数据库文件打交道，负责数据的存储和读取。</li></ol><h1 id="2-SQL-执行流程"><a href="#2-SQL-执行流程" class="headerlink" title="2. SQL 执行流程"></a>2. SQL 执行流程</h1><h2 id="2-1-MySQL-中的-SQL执行流程"><a href="#2-1-MySQL-中的-SQL执行流程" class="headerlink" title="2.1 MySQL 中的 SQL执行流程"></a>2.1 MySQL 中的 SQL执行流程</h2><p>&#x3D;&#x3D;MySQL的查询流程:&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116406.png" alt="image-20220115172223043"></p><h3 id="2-1-1-查询缓存"><a href="#2-1-1-查询缓存" class="headerlink" title="2.1.1 查询缓存"></a>2.1.1 <strong>查询缓存</strong></h3><p>Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端;如果没 有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL 8.0 之后就抛弃 了这个功能。</p><p><strong>大多数情况查询缓存就是个鸡肋，为什么呢?</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure><p>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的 <code>鲁棒性大大降低</code>，只有 <code>相同的查询操作才会命中查询缓存</code>。两个查询请求在任何字符上的不同（例如：空格、注释、 大小写），都会导致缓存不会命中。因此 MySQL 的 <code>查询缓存命中率不高</code> 。</p><p>同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql 、 information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。以某些系统函数举例，可能同样的函数的两次调用会产生不一样的结果，比如函数 <code>NOW</code> ，每次调用都会产生最新的当前时间，如果在一个查询请求中调用了这个函数，那即使查询请求的文本信息都一样，那不同时间的两次查询也应该得到不同的结果，如果在第一次查询时就缓存了，那第二次查询的时候直接使用第一次查询的结果就是错误的!</p><p>此外，既然是缓存，那就有它 <code>缓存失效的时候</code>。MySQL 的缓存系统会监测涉及到的每张表，只要该表的结构或者数据被修改，如对该表使用了 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>TRUNCATE TABLE</code>、<code>ALTER TABLE</code>、<code>DROP TABLE</code>或 <code>DROP DATABASE</code> 语句，那使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除！对于 <code>更新压力大的数据库</code>来说，查询缓存的命中率会非常低。</p><p><strong><font color=red>总之，因为查询缓存往往弊大于利，查询缓存的失效非常频繁。</font></strong></p><p>一般建议大家在静态表里使用查询缓存，什么叫<code>静态表</code>呢?就是一般我们极少更新的表。比如，一个系统配置表、字典表，这张表上的查询才适合使用查询缓存。好在MySQL也提供了这种“<code>按需使用</code>”的方式。你可以将my.cnf参数 query_ <em>cache</em> type  设置成DEMAND，代表当sql语句中有SQL_ CACHE关键词时才缓存。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">query_ cache_ <span class="built_in">type</span>有3个值0代表关闭查询缓存0FF，1代表开启ON，2 (DEMAND)</span></span><br><span class="line">query_cache_ type=2</span><br></pre></td></tr></table></figure><p>这样对于默认的SQL语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用SQL_CACHE显式指定，像下面这个语句一样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL. CACHE <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">5</span> ;<span class="operator">|</span></span><br></pre></td></tr></table></figure><p>查看当前mysq|实例是否开启缓存机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># MySQL5.7 中：</span><br><span class="line">mysql&gt; show global variables like &quot;%query_cache_type%&quot;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| query_cache_type | OFF   |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># MySQL8.0 中：</span><br><span class="line">mysql&gt; show global variables like &quot;%query_cache_type%&quot;;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>监控查询缓存的命中率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;%Qcache%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116898.png" alt="image-20220712222507959"></p><ul><li><code>Qcache_free_blocks</code> ：表示查询缓存中还有多少剩余的blocks,如果该值显示较大,则说明查询缓存中的<code>内存碎片</code>过多了，可能在一定的时间进行整理。</li><li><code>Qcache_free_memory</code> ：查询缓存的内存大小，通过这个参数可以很清晰的知道当前系统的查询内存是否够用，是多了，还是不够用，DBA可以根据实际情况做出调整。</li><li><code>Qcache_hits</code> ：表示有多少次命中缓存。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越理想。</li><li><code>Qcache_inserts</code> ：表示多少次未命中然后插入，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理,执行查询处理后把结果insert到查询缓存中。这样的情况的次数越多，表示查询缓存应用到的比较少，效果也就不理想。当然系统刚启动后，查询缓存是空的，这很正常。</li><li><code>Qcache_lowmem_prunes</code> ：该参数记录有多少条查询因为内存不足而被移除出查询缓存。通过这个值，用户可以适当的调整缓存大小。</li><li><code>Qcache_not_cached</code> ：表示因为query_cache_type的设置而没有被缓存的查询数量。</li><li><code>Qcache_queries_in_cache</code>：当前缓存中<code>缓存的查询数量</code>。</li><li><code>Qcache_total_blocks</code> ：当前缓存的block数量。</li></ul><h3 id="2-1-2-解析器"><a href="#2-1-2-解析器" class="headerlink" title="2.1.2 解析器"></a>2.1.2 <strong>解析器</strong></h3><p>在解析器中对 SQL 语句进行语法分析、语义分析。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130116982.png" alt="image-20220115172951498"></p><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对SQL语句做解析。SQL语句的分析分为词法分析与语法分析。</p><p>分析器先做“<code>词法分析</code> ”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面 的字符串分别是什么，代表什么。</p><p> MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>接着，要做“<code>词法分析</code> ”。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输 入的这个 SQL 语句是否 <code>满足 MySQL 语法</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> department_id,job_id,<span class="built_in">avg</span>(salary) <span class="keyword">from</span> employees <span class="keyword">group</span> <span class="keyword">by</span> department_id; </span><br></pre></td></tr></table></figure><p>如果你的语句不对，就会收到“”的错误提醒，比如这个语句from写成了rom。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * fro user;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;fro user&#x27; at line 1</span><br></pre></td></tr></table></figure><p>如果SQL语句正确，则会生成一个这样的语法树:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117140.png" alt="image-20220115173057415"></p><p>下图是SQL词法分析的过程步骤：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117605.png" alt="image-20220712223741324"></p><p>至此我们解析器的工作任务也基本圆满了。接下来进入到优化器。</p><h3 id="2-1-3-优化器"><a href="#2-1-3-优化器" class="headerlink" title="2.1.3 优化器"></a>2.1.3 优化器</h3><p>在优化器中会确定 SQL 语句的执行路径，比如是根据 <code>全表检索</code> ，还是根据 <code>索引检索</code> 等。</p><p>经过了解析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。<strong>一条查询可以有很多种执行方式，最后都返回相同的结果。优化器的作用就是找到这其中最好的执行计划</strong>。</p><p>举例：如下语句是执行两个表的 join:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1 <span class="keyword">join</span> test2 <span class="keyword">using</span>(ID)</span><br><span class="line"><span class="keyword">where</span> test1.name<span class="operator">=</span><span class="string">&#x27;zhangwei&#x27;</span> <span class="keyword">and</span> test2.name<span class="operator">=</span><span class="string">&#x27;mysql高级课程&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方案1:可以先从表 test1 里面取出 name=&#x27;zhangwei&#x27;的记录的 ID 值，再根据 ID 值关联到表 test2，再判断 test2 里面 name 的值是否等于 &#x27;mysql高级课程&#x27;。</span><br><span class="line"></span><br><span class="line">方案2:可以先从表 test2 里面取出 name=&#x27;mysql高级课程&#x27; 的记录的 ID 值，再根据 ID 值关联到 test1， 再判断 test1 里面 name的值是否等于 zhangwei。</span><br><span class="line"></span><br><span class="line">这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。优化</span><br><span class="line">器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。</span><br><span class="line"></span><br><span class="line">如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等。后面讲到索引我们再谈。</span><br></pre></td></tr></table></figure><p>在查询优化器中，可以分为 <code>逻辑查询</code> 优化阶段和 <code>物理查询</code> 优化阶段。</p><p>逻辑查询优化就是通过改变SQL语句的内容来使得SQL查询更高效，同时为物理查询优化提供更多的候选执行计划。通常采用的方式是对SQL语句进行<code>等价变换</code>，对查询进行重写，而查询重写的数学基础就是关系代数。对条件表达式进行等价谓词重写、条件简化，对视图进行重写，对子查询进行优化，对连接语义进行了外连接消除、嵌套连接消除等。</p><p>物理查询优化是基于关系代数进行的查询重写,而关系代数的每一步都对应着物理计算, 这些物理计算往往存在多种算法，因此需要计算各种物理路径的代价，从中选择代价最小的作为执行计划。在这个阶段里，对于单表和多表连接的操作，需要高效地<code>使用索引</code>，提升查询效率。</p><h3 id="2-1-4-执行器"><a href="#2-1-4-执行器" class="headerlink" title="2.1.4 执行器"></a>2.1.4 执行器</h3><p>截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了 <code>执行器阶段</code> 。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117552.png" alt="image-20220115173252824"></p><p>在执行之前需要判断该用户是否具备权限 。如果没有，就会返回权限错误。如果具备权限，就执行 SQL 查询并返回结果。在 MySQL 8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，调用存储引擎API对表进行的读写。存储引擎API只是抽象接口，下面还有个<strong>存储引擎层</strong>，具体实现还是要看表选择的存储引擎。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117221.png"></p><p>比如：表 test 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p><ul><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是1，如果不是则跳过，如果是则将这行存在结果集中; 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ul><p>至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。</p><p>&#x3D;&#x3D;SQL 语句在 MySQL 中的流程是&#x3D;&#x3D;：<code>SQL 语句 → 查询缓存 → 解析器 → 优化器 → 执行器</code>。</p><p><img src="https://blog-images-1309598269.cos.ap-beijing.myqcloud.com/blogImgs/202206231430741.png" alt="image-20220115173423050"></p><h2 id="2-2-MySQL8中SQL执行原理"><a href="#2-2-MySQL8中SQL执行原理" class="headerlink" title="2.2 MySQL8中SQL执行原理"></a>2.2 MySQL8中SQL执行原理</h2><p>前面的结构图很复杂，我们需要抓取最核心的部分: SQL的执行原理。不同的DBMS的SQL的执行原理是相通的，只是在不同的软件中，各有各的实现路径。</p><p>既然一条SQL语句会经历不同的模块,那我们就来看下，在不同的模块中，SQL 执行所使用的资源(时间)是怎样的。如何在MySQL中对一条SQL语句的执行时间进行分析。</p><h3 id="2-2-1-确认profiling是否开启"><a href="#2-2-1-确认profiling是否开启" class="headerlink" title="2.2.1. 确认profiling是否开启"></a>2.2.1. 确认profiling是否开启</h3><p>了解查询语句底层执行的过程：<code>select @@profiling;</code> 或者<code>show variables like &#39;%profiling%&#39; </code>查看是否开启计划。开启它可以让MySQL收集在SQL执行时所使用的资源情况，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@profiling;</span><br><span class="line">mysq1&gt; show variables like &#x27;profiling&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117783.png" alt="image-20220712230716818"></p><p>profiling &#x3D; 0代表关闭，我们需要把profiling打开，即设置为1；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set profiling = 1;</span><br></pre></td></tr></table></figure><p>Profiling功能由MySQL会话变量：profiling控制。默认是OFF（关闭状态）。</p><h3 id="2-2-2-多次执行相同SQL查询"><a href="#2-2-2-多次执行相同SQL查询" class="headerlink" title="2.2.2.多次执行相同SQL查询"></a>2.2.2.多次执行相同SQL查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-查看profiles"><a href="#2-2-3-查看profiles" class="headerlink" title="2.2.3.查看profiles"></a>2.2.3.查看profiles</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profiles #查询所有sql语句的分析概览</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117582.png" alt="image-20220713001646187"></p><h3 id="2-2-4-查看profile"><a href="#2-2-4-查看profile" class="headerlink" title="2.2.4.查看profile"></a>2.2.4.查看profile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profie;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117949.png" alt="image-20220713001733244"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profie for query Query_ID;# 查看某一次sql执行的分析过程</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117654.png" alt="image-20220713001825251"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117926.png" alt="image-20220713001556760"></p><h2 id="2-3-MySQL5-7中SQL执行原理"><a href="#2-3-MySQL5-7中SQL执行原理" class="headerlink" title="2.3 MySQL5.7中SQL执行原理"></a>2.3 MySQL5.7中SQL执行原理</h2><p>这里我们需要<code>显示开启查询缓存模式</code>。在MySQL5.7中如下设置：</p><h3 id="2-3-1-配置文件中开启查询缓存"><a href="#2-3-1-配置文件中开启查询缓存" class="headerlink" title="2.3.1.配置文件中开启查询缓存"></a>2.3.1.配置文件中开启查询缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type=1</span><br></pre></td></tr></table></figure><h3 id="2-3-2-重启Mysql服务"><a href="#2-3-2-重启Mysql服务" class="headerlink" title="2.3.2.重启Mysql服务"></a>2.3.2.重启Mysql服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="2-3-3-开启查询计划"><a href="#2-3-3-开启查询计划" class="headerlink" title="2.3.3.开启查询计划"></a>2.3.3.开启查询计划</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set profiling = 1;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-执行语句两次"><a href="#2-3-4-执行语句两次" class="headerlink" title="2.3.4.执行语句两次"></a>2.3.4.执行语句两次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line">select * from departments;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-查看profiles"><a href="#2-3-5-查看profiles" class="headerlink" title="2.3.5.查看profiles"></a>2.3.5.查看profiles</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117455.png" alt="image-20220713000901627"></p><h3 id="2-3-6-查看profile"><a href="#2-3-6-查看profile" class="headerlink" title="2.3.6.查看profile"></a>2.3.6.查看profile</h3><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117965.png" alt="image-20220713000946556"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117166.png" alt="image-20220713001014156"></p><p>结论不言而喻.执行编号10时,比执行编号9时少了很多信息,从截图中可以看出查询语句直接从缓存中获取数据 .</p><ul><li><strong>注意1：</strong>&#x3D;&#x3D;SQL必须时一致的,否则,不能命中缓存.&#x3D;&#x3D;</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#虽然查询结果一致， 但并没有命中缓存。</span><br><span class="line">select * from mydb . mytbl where id=2</span><br><span class="line">select * from mydb . mytbl where id&gt;1 and id&lt;3</span><br></pre></td></tr></table></figure><ul><li><strong>注意2：</strong>同样的开启缓存的配置信息如果在MySQL8中添加。重启服务时会报错:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ root@atguigu01 ~]# vim /etc/my.cnf</span><br><span class="line">[root@atguigu01 ~]# systemctl restart mysqld;</span><br><span class="line">Job for mysqld.service failed because the control process exited with error code. See</span><br><span class="line">&quot;systemctl status mysqld. service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure><p>分别在MySQL5.7和MySQL8中执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%query_ cache%&#x27;;</span><br></pre></td></tr></table></figure><p>MySQL5.7中显示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117439.png" alt="image-20220713002324616"></p><p>MySQL8.0中显示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130117438.png" alt="image-20220713002427047"></p><h2 id="2-4-SQL语法顺序"><a href="#2-4-SQL语法顺序" class="headerlink" title="2.4 SQL语法顺序"></a>2.4 SQL语法顺序</h2><p>随着 MySQL 版本的更新换代，其优化器也在不断的升级，优化器会分析不同执行顺序产生的性能消耗不同而动态调整执行顺序。</p><p>需求：查询每个部门年龄高于 20 岁的人数且高于 20 岁人数不能少于 2 人，显示人数最多的第一名部门信息。</p><p>下面是经常出现的查询顺序:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118286.png" alt="image-20220115174625139">]</p><h2 id="2-5-Oracle中的SQL执行流程-了解"><a href="#2-5-Oracle中的SQL执行流程-了解" class="headerlink" title="2.5 Oracle中的SQL执行流程(了解)"></a>2.5 Oracle中的SQL执行流程(了解)</h2><p>Oracle中采用了&#x3D;&#x3D;共享池&#x3D;&#x3D;来判断SQL语句是否存在缓存和执行计划，通过这一步骤我们可以知道应该采用硬解析还是软解析。</p><p>我们先来看下SQL在Oracle中的执行过程:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118798.png" alt="image-20220713003902294">从上面这张图中可以看出, SQL语句在Oracle中经历了以下的几个步骤。</p><ol><li><strong>语法检查</strong>：检查SQL拼写是否正确，如果不正确，Oracle 会报语法错误。</li><li><strong>语义检查</strong>：检查SQL中的访问对象是否存在。比如我们在写SELECT语句的时候，列名写错了，系统就会提示错误。语法检查和语义检查的作用是保证SQL语句没有错误。</li><li><strong>权限检查</strong>：看用户是否具备访问该数据的权限。</li></ol><p>Oracle通过检查共享池是否存在SQL语句的执行计划，来判断进行软解析,还是硬解析。那软解析和硬解析又该怎么理解呢?</p><p>在共享池中，Oracle 首先对SQL语句进行<code>Hash运算</code>，然后根据Hash值在库缓存(Library Cache)中查找，如果<code>存在SQL语句的执行计划</code>，就直接拿来执行，直接进入“执行器”的环节,这就是<code>软解析</code>。</p><p>如果没有找到SQL语句和执行计划，Oracle 就需要创建解析树进行解析，生成执行计划，进入“优化器”这个步骤,这就是<code>硬解析</code>。</p><ol start="5"><li><strong>优化器</strong>:优化器中就是要进行硬解析，也就是决定怎么做，比如创建解析树，生成执行计划。</li><li><strong>执行器</strong>:当有了解析树和执行计划之后,就知道了SQL该怎么被执行，这样就可以在执行器中执行语句了。</li></ol><p>共享池是Oracle中的术语，包括了库缓存,数据字典缓冲区等。我们_上面已经讲到了库缓存区，它主要缓存SQL语句和执行计划。而<code>数据字典缓冲区</code>存储的是Oracle中的对象定义,比如表、视图、索引等对象。当对SQL语句进行解析的时候，如果需要相关的数据，会从数据字典缓冲区中提取。</p><p><code>库缓存</code>这一个步骤，决定了SQL语句是否需要进行硬解析。为了提升SQL的执行效率,我们应该尽量避免硬解析，因为在SQL的执行过程中，创建解析树，生成执行计划是很消耗资源的。</p><p>你可能会问，如何避免硬解析，尽量使用软解析呢?在Oracle中，<code>绑定变量</code>是它的一大特色。绑定变量就是在SQL语句中使用变量，通过不同的变量取值来改变SQL的执行结果。这样做的好处是能<code>提升软解析的可能性</code>，不足之处在于可能会导致生成的执行计划不够优化，因此是否需要绑定变量还需要视情况而定。</p><p>举个例子，我们可以使用下面的查询语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select * from player where player_id = 10001;</span><br></pre></td></tr></table></figure><p>你也可以使用绑定变量，如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOL&gt; select * from plaver where plaver id = :plaver_id:</span><br></pre></td></tr></table></figure><p>这两个查询语句的效率在Oracle中是完全不同的。如果你在查询player. _id&#x3D; 10001之后,还会查询10002、10003之类的数据,那么每- -次查询都会创建一 个新的查询解析。 而第二种方式使用了绑定变量，那么在第一-次查询之后，在共享池中就会存在这类查询的执行计划，也就是软解析。</p><p>因此，我<strong>们可以通过使用绑定变量来减少硬解析，减少Oracle的解析工作量</strong>。但是这种方式也有缺点，使用动态SQL的方式，因为参数不同，会导致SQL的执行效率不同，同时SQL优化也会比较困难。</p><p>&#x3D;&#x3D;Oracle的架构图：&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118351.png" alt="image-20220713004228345"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118783.png"></p><h1 id="3-数据库缓冲池（buffer-pool）"><a href="#3-数据库缓冲池（buffer-pool）" class="headerlink" title="3. 数据库缓冲池（buffer pool）"></a>3. 数据库缓冲池（buffer pool）</h1><p><code>InnoDB</code>存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页 面(包括读页面、写页面、创建新页面等操作)。而磁盘 I&#x2F;O 需要消耗的时间很多，而在内存中进行操 作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请<code>占用内存来作为数据缓冲池</code>，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的<code>Buffer Pool</code>之后才可以访 问。</p><p>这样做的好处是可以让磁盘活动最小化，从而<code>减少与磁盘直接进行 I/O 的时间</code> 。要知道，这种策略对提 升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。</p><h2 id="3-1-缓冲池-vs-查询缓存"><a href="#3-1-缓冲池-vs-查询缓存" class="headerlink" title="3.1 缓冲池 vs 查询缓存"></a>3.1 缓冲池 vs 查询缓存</h2><p><strong>缓冲池和查询缓存是一个东西吗？不是。</strong></p><h3 id="3-1-1-缓冲池（Buffer-Pool）"><a href="#3-1-1-缓冲池（Buffer-Pool）" class="headerlink" title="3.1.1 缓冲池（Buffer Pool）"></a>3.1.1 缓冲池（Buffer Pool）</h3><p>首先我们需要了解在 InnoDB 存储引擎中，缓冲池都包括了哪些。</p><p>在 InnoDB 存储引擎中有一部分数据会放到内存中，缓冲池则占了这部分内存的大部分，它用来存储各种数据的缓存，如下图所示:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118698.png" alt="image-20220115175644920"></p><p>从图中，你能看到InnoDB缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应Hash和数据字典信息等。</p><p><strong>缓存池的重要性:</strong></p><p>对于使用<code>InnoDB</code>作为存储引擎的表来说,不管是用于存储用户数据的索引(包括聚簇索引和二级索引)，还是各种系统数据，都是以<code>页</code>的形式存放在<code>表空间</code>中的,而所谓的表空间只不过是InnoDB对文件系统上一个或几个实际文件的抽象，也就是说我们的数据说到底还是存储在磁盘上的。但是各位也都知道，磁盘的速度慢的跟乌龟一样,怎么能配得上“<code>快如风，疾如电”的CPU</code>呢?这里，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟。所以InnoDB存储弓|擎在处理客户端的请求时，当需要访问某个页的数据时，就会把<code>完整的页的数据全部加载到内存</code>中，也就是说即使我们只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中。将整个页加载到内存中后就可以进行读写访问了，在进行完读写访问之后并不着急把该页对应的内存空间释放掉,而是将其<code>缓存</code>起来,这样将来有请求再次访问该页面时，就可以<code>省去磁盘I0</code>的开销了。</p><p><strong>缓存原则：</strong></p><p>“<code>位置 * 频次</code> ”这个原则，可以帮我们对 I&#x2F;O 访问效率进行优化。 首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。</p><p>其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200G，但是内存只有 16G，缓冲池大小只有 1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会 <code>优先对使用频次高的热数据进行加载</code>。</p><p><strong>缓冲池的预读特性:</strong></p><p>一个缓存了解了缓冲池的作用之后，我们还需要了解缓冲池的另一个特性: <code>预读</code>。</p><p>缓冲池的作用就是提升I&#x2F;0效率，而我们进行读取数据的时候存在一个“局部性原理”， 也就是说我使用了一些数据，<code>大概率还会使用它周围的一些数据</code>，因此采用“预读”的机制提前加载，可以减少未来可能的磁盘1&#x2F;O操作。</p><h3 id="3-1-2-查询缓存"><a href="#3-1-2-查询缓存" class="headerlink" title="3.1.2 查询缓存"></a>3.1.2 查询缓存</h3><p>那么什么是查询缓存呢?</p><p>查询缓存是提前把 <code>查询结果缓存</code> 起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表发生变化，查询缓存就会失效，因此命中率低。</p><h2 id="3-2-缓冲池如何读取数据"><a href="#3-2-缓冲池如何读取数据" class="headerlink" title="3.2 缓冲池如何读取数据"></a>3.2 缓冲池如何读取数据</h2><p>缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。<br>缓存在数据库中的结构和作用如下图所示：</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118451.png" alt="image-20220115175859026"></p><p><strong>&#x3D;&#x3D;如果我们执行SQL语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗?&#x3D;&#x3D;</strong> </p><p>实际上，当我们对数据库中的记录进行修改的时候，首先会修改缓冲池中页里面的记录信息,然后数据库会<code>以一定的频率刷新</code>到磁盘上。注意并不是每次发生更新操作，都会立刻进行磁盘回写。缓冲池会采用一种叫做<code>checkpoint的机制</code>将数据回写到磁盘上,这样做的好处就是提升了数据库的整体性能。</p><p>比如，当<code>缓冲池不够用</code>时，需要释放掉一些不常用的页，此时就可以强行采用checkpoint的方式，将不常用的脏页回写到磁盘上,然后再从缓冲池中将这些页释放掉。这里脏页(dirty page)指的是缓冲池中被修改过的页，与磁盘上的数据页不一致。</p><h2 id="3-3-查看-设置缓冲池的大小"><a href="#3-3-查看-设置缓冲池的大小" class="headerlink" title="3.3 查看&#x2F;设置缓冲池的大小"></a>3.3 查看&#x2F;设置缓冲池的大小</h2><p>如果你使用的是MySQL MyISAM存储引擎,它只缓存索引， 不缓存数据，对应的键缓存参数<br><code>key_buffer_size</code>，你可以用它进行查看。</p><p>如果你使用的是InnoDB存储引擎，可以通过查看 <code>innodb_buffer_pool_size</code> 变量来查看缓冲池的大 小。命令如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_buffer_pool_size&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118317.png" alt="image-20220115175953098"></p><p>你能看到此时 InnoDB 的缓冲池大小只有 134217728&#x2F;1024&#x2F;1024&#x3D;128MB。我们可以修改缓冲池大小，比如 改为256MB，方法如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> innodb_buffer_pool_size <span class="operator">=</span> <span class="number">268435456</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118511.png" alt="image-20220115180020887"></p><p>或者:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_buffer_pool_size <span class="operator">=</span> <span class="number">268435456</span></span><br></pre></td></tr></table></figure><p>然后再来看下修改后的缓冲池大小，此时已成功修改成了 256 MB:</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118502.png" alt="image-20220115180055102"></p><h2 id="3-4-多个Buffer-Pool实例"><a href="#3-4-多个Buffer-Pool实例" class="headerlink" title="3.4 多个Buffer Pool实例"></a>3.4 多个Buffer Pool实例</h2><p>Buffer Pool本质是InnoDB向操作系统申请的一块<code>连续的内存空间</code>，在多线程环境下，访问Buffer Pool中的数据都需要<code>加锁</code>处理。在Buffer Pool特别大而且多线程并发访问特别高的情况下，单一的Buffer Pool可能会影响请求的处理速度。所以在Buffer Pool特别大的时候，我们可以把它们<code>拆分成若干个小的Buffer Pool</code> ，每个Buffer Pool都称为一个<code>实例</code>，它们都是独立的，独立的去申请内存空间，独立的管理各种链表。所以在多线程并发访问时并不会相互影响，从而提高并发处理能力。</p><p>我们可以在服务器启动的时候通过设置<code>innodb_buffer_pool_instances</code> 的值来修改Buffer Pool实例的个数,</p><p>比方说这样:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_buffer_pool_instances <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这样就表明我们要创建2个 <code>Buffer Pool</code> 实例。</p><p>我们看下如何查看缓冲池的个数，使用命令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_buffer_pool_instances&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118918.png" alt="image-20220115180223458"></p><p>那每个 <code>Buffer Pool</code> 实例实际占多少内存空间呢?其实使用这个公式算出来的：<code>innodb_buffer_pool_size/innodb_buffer_pool_instances</code></p><p>也就是总共的大小除以实例的个数，结果就是每个<code>Buffer Pool</code> 实例占用的大小。</p><p>不过也不是说Buffer Pool实例创建的越多越好，分别<code>管理各个Buffer Pool也是需要性能开销</code>的，InnoDB规定:当innodb_buffer_pool_size的值小于1G的时候设置多个实例是无效的，InnoDB会默认把innodb_ buffe _pool_instances 的值修改为1。而我们鼓励在Buffer Ppol大于或等于1G的时候设置多个Buffer Pool实例。</p><h2 id="3-5-引申问题"><a href="#3-5-引申问题" class="headerlink" title="3.5 引申问题"></a>3.5 引申问题</h2><p>Buffer Pool 是 MySQL 内存结构中十分核心的一个组成，你可以先把它想象成一个黑盒子。</p><p><strong>黑盒下的更新数据流程</strong></p><p>当我们查询数据的时候，会先去Buffer Pool中查询。如果Buffer Pool中不存在,存储弓|擎会先将数据从磁盘加载到Buffer Pool中，然后将数据返回给客户端;同理，当我们更新某个数据的时候，如果这个数据不存在于Buffer Pool,同样会先数据加载进来，然后修改修改内存的数据。被修改过的数据会在之后统一刷入磁盘。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207130118256.png" alt="image-20220115180314323"></p><p>这个过程看似没啥问题，实则是有问题的。假设我们修改Buffer Pool中的数据成功，但是还没来得及将数据刷入磁盘MySQL就挂了怎么办?按照上图的逻辑，此时更新之后的数据只存在于Buffer Pool中,如果此时MySQL宕机了，这部分数据将会永久地丢失;</p><p>我更新到一半突然发生错误了，想要回滚到更新之前的版本，该怎么办？连数据持久化的保证、事务回滚都做不到还谈什么崩溃恢复?</p><p>答案：<strong>Redo Log &amp; Undo Log</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的数据目录</title>
      <link href="/2024/04/01/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
      <url>/2024/04/01/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL8的主要目录结构"><a href="#1-MySQL8的主要目录结构" class="headerlink" title="1. MySQL8的主要目录结构"></a>1. MySQL8的主要目录结构</h2><p>以 Linux 系统为例进行讲解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xue ~]# find / -name mysql</span><br></pre></td></tr></table></figure><p>安装好MySQL 8之后，我们查看如下的目录结构:</p><h3 id="1-1-数据库文件的存放路径"><a href="#1-1-数据库文件的存放路径" class="headerlink" title="1.1 数据库文件的存放路径"></a>1.1 数据库文件的存放路径</h3><p>&#x3D;&#x3D;MySQL数据库文件的存放路径：&#x3D;&#x3D;<code>/var/lib/mysql/</code></p><p>MySQL服务器程序在启动时会到文件系统的某个目录下加载一些文件，之后在运行过程中产生的数据也都会存储到这个目录下的某些文件中，这个目录就称为 <code>数据目录</code>。</p><p>MySQL把数据都存到哪个路径下呢？其实 <code>数据目录</code> 对应这一个系统变量 <code>datadir</code>，我们在使用客户端与服务器建立连接之后查看这个系统变量的值就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;datadir&#x27;;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value           |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| datadir       | /var/lib/mysql/ |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure><p>从结果中可以看出，在我的计算机上MySQL的数据目录就是 <code>/var/lib/mysql</code>&#x2F; 。</p><h3 id="1-2-相关命令目录"><a href="#1-2-相关命令目录" class="headerlink" title="1.2 相关命令目录"></a>1.2 相关命令目录</h3><p>&#x3D;&#x3D;相关命令目录：&#x2F;usr&#x2F;bin（mysqladmin、mysqlbinlog、mysqldump等命令）和&#x2F;usr&#x2F;sbin&#x3D;&#x3D;。</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733159.png" alt="image-20220709112725420"></p><h3 id="1-3-配置文件目录"><a href="#1-3-配置文件目录" class="headerlink" title="1.3 配置文件目录"></a>1.3 <strong>配置文件目录</strong></h3><p>&#x3D;&#x3D;配置文件目录：&#x2F;usr&#x2F;share&#x2F;mysql-8.0（命令及配置文件），&#x2F;etc&#x2F;mysql（如 my.cnf）&#x3D;&#x3D;</p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733524.png" alt="image-20220709112825432"></p><h2 id="2-数据库和文件系统的关系"><a href="#2-数据库和文件系统的关系" class="headerlink" title="2. 数据库和文件系统的关系"></a>2. 数据库和文件系统的关系</h2><p>像<code>InnoDB</code>、<code>MyISAM </code>这样的存储引擎都是把表存储在磁盘上的，操作系统用来管理磁盘的结构被称为&#x3D;&#x3D;文件系统&#x3D;&#x3D;，所以用专业一点的话来表述就是:像<strong>InnoDB、MyISAM</strong> 这样的存储引擎都是把&#x3D;&#x3D;表存储在文件系统上&#x3D;&#x3D;的。当我们想读取数据的时候，这些存储引擎会从文件系统中把数据读出来返回给我们，当我们想写入数据的时候,这些存储弓擎会把这些数据又写回文件系统。本章学习一下<code>InnoDB</code>和<code>MyISAM</code>这两个存储弓|擎的数据如何在文件系统中存储。</p><h3 id="2-1-查看默认数据库"><a href="#2-1-查看默认数据库" class="headerlink" title="2.1 查看默认数据库"></a>2.1 查看默认数据库</h3><p>查看一下在我的计算机上当前有哪些数据库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES; </span><br></pre></td></tr></table></figure><p>可以看到有 4 个数据库是属于 MySQL 自带的系统数据库。</p><ul><li><p><code>mysql</code></p><p>MySQL 系统自带的核心数据库，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定 义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。</p></li><li><p><code>information_schema</code></p><p>MySQL 系统自带的数据库，这个数据库保存着 MySQL 服务器 <code>维护的所有其他数据库的信息</code> ，比如有哪些表、哪些视图、哪些触发器、哪些列、哪些索引。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为 <code>元数据</code> 。在系统数据库 <code>information_schema</code> 中提供了一些以 <code>innodb_sys</code> 开头的表，用于表示内部系统表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE information_schema;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> TABLES <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_sys%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_information_schema (innodb_sys<span class="operator">%</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_DATAFILES                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_VIRTUAL                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_INDEXES                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLES                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FIELDS                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESPACES                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN_COLS                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_COLUMNS                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESTATS                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p><code>performance_schema</code></p><p>MySQL 系统自带的数据库，这个数据库里主要保存 MySQL 服务器运行过程中的一些状态信息，可以用来 <code>监控 MySQL 服务的各类性能指标</code> 。包括统计最近执行了哪些语句，在执行过程的每个阶段都花费了多长时间，内存的使用情况等信息。</p></li><li><p><code>sys</code></p><p>MySQL 系统自带的数据库，这个数据库主要是通过 <code>视图</code> 的形式把 <code>information_schema</code> 和 <code>performance_schema</code> 结合起来，帮助系统管理员和开发人员监控 MySQL 的技术性能。</p></li></ul><h3 id="2-2-数据库在文件系统中的表示"><a href="#2-2-数据库在文件系统中的表示" class="headerlink" title="2.2 数据库在文件系统中的表示"></a>2.2 数据库在文件系统中的表示</h3><p>使用<code>CREATE DATABASE 数据库名</code>语句创建一个数据库的时候， 在文件系统上实际发生了什么呢?其实很简单,每个数据库都对应数据目录下的一个子目录，或者说对应一个文件夹，每当新建一 个数据库时, MySQL会帮我们做这两件事儿:</p><ol><li>在<code>数据目录</code>下创建一个和数据库名同名的子目录。</li><li>在与该数据库名同名的子目录下创建一个名为<code> db.opt</code>的文件(仅限MySQL5.7及之前版本)，这个文件中包含了<code>该数据库的各种属性</code>，比如该数据库的字符集和比较规则。</li></ol><p>我们再看一下我的计算机上的数据目录下的内容:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@hadoop102</span> <span class="operator">~</span>]# cd <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql</span><br><span class="line">[root<span class="variable">@hadoop102</span> mysql]# ll</span><br><span class="line">总用量 <span class="number">188880</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql       56 5月   9 21:36 auto.cnf</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql      156 6月  13 18:50 binlog.000005</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql      156 7月   9 13:05 binlog.000006</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql      156 7月   9 13:05 binlog.000007</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql       48 7月   9 13:05 binlog.index</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1676 5月   9 21:36 ca-key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql     1112 5月   9 21:36 ca.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql     1112 5月   9 21:36 client-cert.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1680 5月   9 21:36 client-key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql   196608 7月   9 13:05 #ib_16384_0.dblwr</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql  8585216 5月   9 21:36 #ib_16384_1.dblwr</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql     3357 5月  10 22:47 ib_buffer_pool</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 12582912 7月   9 13:05 ibdata1</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 50331648 7月   9 13:05 ib_logfile0</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 50331648 5月   9 21:36 ib_logfile1</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 12582912 7月   9 13:05 ibtmp1</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 7月   9 13:05 #innodb_temp</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 5月   9 21:36 mysql</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 25165824 7月   9 13:05 mysql.ibd</span></span><br><span class="line">srwxrwxrwx. <span class="number">1</span> mysql mysql        <span class="number">0</span> <span class="number">7</span>月   <span class="number">9</span> <span class="number">13</span>:<span class="number">05</span> mysql.sock</span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql        5 7月   9 13:05 mysql.sock.lock</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 5月   9 21:36 performance_schema</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1680 5月   9 21:36 private_key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql      452 5月   9 21:36 public_key.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--. 1 mysql mysql     1112 5月   9 21:36 server-cert.pem</span></span><br><span class="line"><span class="operator">-</span>rw<span class="comment">-------. 1 mysql mysql     1680 5月   9 21:36 server-key.pem</span></span><br><span class="line">drwxr<span class="operator">-</span>x<span class="comment">---. 2 mysql mysql     4096 5月   9 21:36 sys</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 16777216 7月   9 13:05 undo_001</span></span><br><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">-----. 1 mysql mysql 16777216 7月   9 13:05 undo_002</span></span><br></pre></td></tr></table></figure><p>这个数据目录下的文件和子目录比较多，除了 <code>information_schema</code> 这个系统数据库外，其他的数据库在 <code>数据目录</code> 下都有对应的子目录。</p><h3 id="2-3-表在文件系统中的表示"><a href="#2-3-表在文件系统中的表示" class="headerlink" title="2.3 表在文件系统中的表示"></a>2.3 表在文件系统中的表示</h3><h4 id="2-3-1-InnoDB存储引擎模式"><a href="#2-3-1-InnoDB存储引擎模式" class="headerlink" title="2.3.1 InnoDB存储引擎模式"></a>2.3.1 InnoDB存储引擎模式</h4><p><strong>1、表结构</strong></p><p>为了保存表结构， <code>InnoDB</code>在 <code>数据目录</code> 下对应的数据库子目录下创建了一个专门用于 <code>描述表结构的文件</code>，文件名是这样：<code>表名.frm</code></p><p>比方说我们在 <code>test</code>数据库下创建一个名为<code>test</code>的表</p><p>那在数据库 <code>test</code> 对应的子目录下就会创建一个名为 <code>test.frm</code> 的用于描述表结构的文件。<code>.frm</code> 文件的格式在不同的平台上都是相同的。这个后缀名为 <code>.frm</code> 是以 <code>二进制格式</code> 存储的，我们直接打开是乱码的。</p><p><strong>2、表中数据和索引</strong></p><p><font color=#880000><strong>①系统表空间（system tablespace）</strong></font></p><p>默认情况下，InnoDB 会在数据目录下创建一个名为 <code>ibdata1</code>、大小为 <code>12M</code> 的文件，这个文件就是对应的 <code>系统表空间</code> 在文件系统上的表示。怎么才12M？</p><p>注意这个文件是 <code>自扩展文件</code> ，当不够用的时候它会自己增加文件大小。</p><p>当然，如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的 <code>ibdata1</code> 这个文件名难听，那可以在MySQL启动时配置对应的文件路径以及它们的大小，比如我们这样修改一下my.cnf 配置文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_data_file_path=data1:512M;data2:512M:autoextend</span><br></pre></td></tr></table></figure><p>这样在MySQL启动之后就会创建这两个512M大小的文件作为<code>系统表空间</code>，其中的<code>autoextend</code>表明这两个文件如果不够用会自动扩展data2文件的大小。</p><p>需要注意的一点是,&#x3D;&#x3D;在一个MySQL服务器中，系统表空间只有一份&#x3D;&#x3D;。从MySQL5.5.7到MySQL5.6.6之间的各个版本中，我们<strong>表中的数据都会被默认存储到这个系统表空间</strong>。</p><p><strong><font color=#880000>②独立表空间（file-per-table tablespace）</font></strong></p><p>在 MySQL 5.6.6 以及之后的版本中，InnoDB 并不会默认的把各个表的数据存储到系统表空间中，而是为 <code>每一个表建立一个独立表空间</code>，也就是说我们创建了多少个表，就有多少个独立表空间。使用 <code>独立表空间</code> 来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同，只不过添加了一个 <code>.ibd</code> 的扩展名而已，所以完整的文件名称长这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表名.ibd</span><br></pre></td></tr></table></figure><p>比如：我们使用了 <code>独立表空间</code> 去存储<code>test</code>数据库下的 <code>test</code> 表的话，那么在该表所在数据库<code>atguigu</code>对应的 test 目录下会为 test 表创建这两个文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.frm</span><br><span class="line">test.ibd</span><br></pre></td></tr></table></figure><p>其中 <code>test.ibd</code> 文件就用来存储 <code>test</code> 表中的数据和索引；而<code>text.frm</code> 描述表的结构。</p><p><strong><font color=#880000>③系统表空间与独立表空间的设置</font></strong></p><p>我们可以自己指定使用 <code>系统表空间</code> 还是 <code>独立表空间</code> 来存储数据，这个功能由启动参数 <code>innodb_file_per_table</code> 控制，比如说我们想刻意将表数据都存储到 <code>系统表空间</code> 时，可以在启动MySQL服务器的时候这样配置:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_file_per_table<span class="operator">=</span><span class="number">0</span> # <span class="number">0</span>:代表使用系统表空间; <span class="number">1</span>:代表使用独立表空间</span><br></pre></td></tr></table></figure><p>默认情况:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_file_per_table&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name         <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_file_per_table <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec) # <span class="keyword">on</span>：代表独立表空间</span><br></pre></td></tr></table></figure><p><strong><font color=#880000>④其他类型的表空间</font></strong></p><p>随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用表空间（general tablespace）、临时表空间（temporary tablespace）等。</p><p><strong>3、图解</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733845.png"></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091733587.png"></p><p><strong>4、疑问</strong></p><p><code>.frm</code> 在MySQL8中不存在了，去哪里了？</p><p>这就需要解析 <code>ibd 文件</code>。Oracle官方将 <code>frm文件</code> 的信息及更多信息移动到叫做序列化字典信息（Serialized Dictionary Information,SDI），SDI 被写在 ibd 文件内部，MySQL 8.0 属于 Oracle 旗下，同理。</p><p>为了从 IBD 文件中提取 SDI 信息，Oracle 提供了一个应用程序 ibd2sdi</p><p>这个工具不需要下载，MySQL8自带的有，只需要你配好环境变量就能到处用。</p><p>查看表结构：到存储ibd文件的目录下，执行下面的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibd2sdi <span class="comment">--dump-file=student.txt student.ibd</span></span><br></pre></td></tr></table></figure><p>这样 ibd2sdi 就会把 <code>xxx.ibd</code> 里存储的表结构以 json 的格式保存在 student.txt 中</p><h4 id="2-3-2-MyISAM-存储引擎模式"><a href="#2-3-2-MyISAM-存储引擎模式" class="headerlink" title="2.3.2 MyISAM 存储引擎模式"></a>2.3.2 MyISAM 存储引擎模式</h4><p><strong>1、表结构</strong></p><p>在存储表结构方面， <code>MyISAM</code> 和 <code>InnoDB</code> 一样，也是在 <code>数据目录</code> 下对应的数据库子目录下创建了一个专 门用于描述表结构的文件：<code>表名.frm</code></p><p><strong>2、表中数据和索引</strong></p><p>在 MyISAM 中的索引全部都是 <code>二级索引</code> ，该存储引擎的 <code>数据和索引是分开存放</code> 的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。假如 <code>test</code> 表使用 MyISAM 存储引擎的话，那么在它所在数据库对应的 <code>test</code> 目录下会为 test 表创建这三个文件：</p><ul><li><code>test.frm</code> 存储表结构</li><li><code>test.MYD</code> 存储数据 (MYData)</li><li><code>test.MYI</code> 存储索引 (MYIndex)</li></ul><p><strong>3、图解</strong></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091734468.png"></p><h3 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4 小结"></a>2.4 小结</h3><p>举例：<code>数据库 a</code> ， <code>表b</code> 。</p><ol><li><p>如果表 b 采用 <code>InnoDB</code> ，data&#x2F;a 中会产生 1 个或者 2 个文件:</p><ul><li><code>b.frm</code>：描述表结构文件，字段长度等</li><li>如果采用 <code>系统表空间</code> 模式的，数据信息和索引信息都存储在 <code>ibdata1</code> 中</li><li>如果采用 <code>独立表空间</code> 存储模式，data&#x2F;a中还会产生 <code>b.ibd</code> 文件（存储数据信息和索引信息）</li></ul><blockquote><p>MySQL 5.7 中会在 data&#x2F;a 的目录下生成 <code>db.opt</code> 文件用于保存数据库的相关配置。比如：字符集、比较规则。而 MySQL 8.0 不再提供 db.opt 文件。</p><p>MySQL 8.0 中 不再单独提供 <code>b.frm</code>，而是合并在 <code>b.ibd</code> 文件中。</p></blockquote></li><li><p>如果表 b 采用 <code>MyISAM</code> ，data&#x2F;a中会产生 3 个文件:</p><ul><li>MySQL5.7 中 <code>b.frm</code> ：描述表结构文件，字段长度等。</li><li>MySQL8.0 中 <code>b.xxx.sdi</code> ：描述表结构文件，字段长度等</li><li><code>b.MYD</code> (MYData)：数据信息文件，存储数据信息(如果采用独立表存储模式)</li><li><code>b.MYI</code> (MYIndex)：存放索引信息文件</li></ul></li></ol><h3 id="2-5-视图在文件系统中的表示"><a href="#2-5-视图在文件系统中的表示" class="headerlink" title="2.5 视图在文件系统中的表示"></a>2.5 视图在文件系统中的表示</h3><p>我们知道MySQL中的<code>视图</code>其实是<code>虚拟的表</code>，也就是某个查询语句的一一个别名而已，所以在存储视图的时候是不要存储真实的数据的，只需要把它的结构存储起来就行了。和表一样，描述视图结构的文件也会被存储到所属数据库对应的子目录下边，只会存储一个<code>视图名. frm</code>的文件。如下图中的: <code>emp_details_view.frm</code></p><p><img src="https://blog-photos-lxy.oss-cn-hangzhou.aliyuncs.com/img/202207091735198.png" alt="image-20220709125100055"></p><h3 id="2-6-其他的文件"><a href="#2-6-其他的文件" class="headerlink" title="2.6 其他的文件"></a>2.6 其他的文件</h3><p>除了我们上边说的这些用户自己存储的数据以外，<code>数据目录</code>下还包括为了更好运行程序的一些额外文件,主要包括这几种类型的文件:</p><ul><li><p><strong>服务器进程文件</strong></p><p>我们知道每运行一个MySQL服务器程序,都意味着启动一个进程。MySQL服务器会把自己的进程ID写入到一个文件中。</p></li><li><p><strong>服务器日志文件</strong></p><p>在服务器运行过程中，会产生各种各样的日志，比如常规的查询日志、错误日志、二进制日志、redo日志等。这些日志各有各的用途。后面讲解。</p></li><li><p><strong>默认&#x2F;自动生成的SSL和RSA证书和密钥文件</strong></p><p>主要是为了客户端和服务器安全通信而创建的一些文件。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/31/hello-world/"/>
      <url>/2024/03/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
